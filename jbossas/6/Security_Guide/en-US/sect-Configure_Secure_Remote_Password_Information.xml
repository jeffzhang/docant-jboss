<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="sect-Configure_Secure_Remote_Password_Information">
  <title>Configure Secure Remote Password Information</title>
  <para>You must  create a MBean service that provides an implementation of the <literal>SRPVerifierStore</literal> interface that integrates with your existing security information stores. The <literal>SRPVerifierStore</literal> interface is shown in <xref linkend="Providing_Password_Information_for_SRP-The_SRPVerifierStore_Interface"/>.
   </para>
  <note>
    <para>
    The default implementation of the <literal>SRPVerifierStore</literal> interface is not recommended for a production security environment because it requires all password hash information to be available as a file of serialized objects. </para>
  </note>
  <example id="Providing_Password_Information_for_SRP-The_SRPVerifierStore_Interface">
    <title>The SRPVerifierStore interface</title>
    <programlisting language="Java" role="JAVA">package org.jboss.security.srp;

import java.io.IOException;
import java.io.Serializable;
import java.security.KeyException;

public interface SRPVerifierStore
{
    public static class VerifierInfo implements Serializable
    {

        public String username;


        public byte[] salt;
        public byte[] g;
        public byte[] N;
    }
    

    public VerifierInfo getUserVerifier(String username)
        throws KeyException, IOException;

    public void setUserVerifier(String username, VerifierInfo info)
        throws IOException;


     public void verifyUserChallenge(String username, Object auxChallenge)
         throws SecurityException;
} 
</programlisting>
    <para>
    The primary function of a <literal>SRPVerifierStore</literal> implementation is to provide access to the <literal>SRPVerifierStore.VerifierInfo</literal> object for a given username. The <literal>getUserVerifier(String)</literal> method is called by the <literal>SRPService</literal> at that start of a user SRP session to obtain the parameters needed by the SRP algorithm. The elements of the <literal>VerifierInfo</literal> objects are:
   </para>
    <variablelist>
      <varlistentry>
        <term>
          <markup>username</markup>
        </term>
        <listitem>
          <para>The user&apos;s name or id used to login.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <markup>verifier</markup>
        </term>
        <listitem>
          <para>One-way hash of the password or PIN the user enters as proof of  identity. The <classname>org.jboss.security.Util</classname> class has a <methodname>calculateVerifier</methodname> method that performs that password hashing algorithm. The output password takes the form  <literal>H(salt | H(username | &apos;:&apos; | password))</literal>, where  <literal>H</literal> is the SHA secure hash function as defined by RFC2945. The username is converted from a string to a <literal>byte[]</literal> using  UTF-8 encoding.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>salt</term>
        <listitem>
          <para>Random number used to increase the difficulty of a brute force dictionary attack on the verifier password database in the event that the database is compromised. The value  should be generated from a cryptographically strong random number algorithm when the user&apos;s existing clear-text password is hashed.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>g</term>
        <listitem>
          <para>SRP algorithm primitive generator. This can  be a well known fixed parameter rather than a per-user setting. The <classname>org.jboss.security.srp.SRPConf</classname> utility class provides several settings for <literal>g</literal>, including a suitable default  obtained via <literal>SRPConf.getDefaultParams().g()</literal>.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>N</term>
        <listitem>
          <para>SRP algorithm safe-prime modulus. This can be a well known fixed parameter rather than a per-user setting. The <classname>org.jboss.security.srp.SRPConf</classname> utility class provides several settings for <literal>N</literal> including a good default which can obtained via <literal>SRPConf.getDefaultParams().N()</literal>.
     </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <procedure>
      <title>Integrate Existing Password Store</title>
      <para>Read this procedure to understand the steps involved to integrate your existing password store.</para>
      <step>
        <title>Create Hashed Password Information Store</title>
        <para>If your passwords are already stored in an irreversible hashed form, then this can only be done on a per-user basis (for example, as part of an upgrade procedure).</para>
        <para>You can implement   <literal>setUserVerifier(String, VerifierInfo)</literal> as a <methodname>noOp</methodname> method, or a method that throws an exception stating that the store is  read-only. </para>
      </step>
      <step>
        <title>Create SRPVerifierStore Interface</title>
        <para>You must create a  custom <literal>SRPVerifierStore</literal> interface implementation that understands how to obtain the <literal>VerifierInfo</literal> from the store you created. </para>
        <para>The <methodname>verifyUserChallenge(String, Object)</methodname> can be used to integrate existing hardware token based schemes like SafeWord or Radius into the SRP algorithm.  This interface method is  called only when the client <literal>SRPLoginModule</literal> configuration specifies the <literal>hasAuxChallenge</literal> option.</para>
      </step>
      <step>
        <title>Create JNDI MBean</title>
        <para>You must create a MBean that exposes the  <literal>SRPVerifierStore</literal> interface available to JNDI, and exposes any configurable parameters required.</para>
        <para>The default <literal>org.jboss.security.srp.SRPVerifierStoreService</literal> will allow you to implement this, however you can also implement the MBean using a Java properties file implementation of  <literal>SRPVerifierStore</literal> (refer to <xref linkend="sect-Secure_Remote_Password_Example"/>).  </para>
      </step>
    </procedure>
  </example>
</section>
