<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="sect-Secure_Remote_Password_Example">
  <title>Secure Remote Password Example</title>
  <para>
     The example presented in this section demonstrates client side authentication of the user via SRP as well as subsequent secured access to a simple EJB using the SRP session challenge as the user credential. The test code deploys an EJB JAR that includes a SAR for the configuration of the server side login module configuration and SRP services. </para>
  <para>The server side login module configuration is dynamically installed using the <literal>SecurityConfig</literal> MBean. A custom implementation of the <literal>SRPVerifierStore</literal> interface is also used in the example.  The interface uses an in-memory store that is seeded from a Java properties file, rather than a serialized object store as used by the <literal>SRPVerifierStoreService</literal>. </para>
  <para>This custom service is <literal>org.jboss.book.security.ex3.service.PropertiesVerifierStore</literal>. The following shows the contents of the JAR that contains the example EJB and SRP services.
    </para>
  <screen>[examples]$ jar tf output/security/security-ex3.jar 
META-INF/MANIFEST.MF
META-INF/ejb-jar.xml
META-INF/jboss.xml
org/jboss/book/security/ex3/Echo.class
org/jboss/book/security/ex3/EchoBean.class
org/jboss/book/security/ex3/EchoHome.class
roles.properties
users.properties
security-ex3.sar</screen>
  <para>
     The key SRP related items in this example are the SRP MBean services configuration, and the SRP login module configurations. The <filename>jboss-service.xml</filename> descriptor of the <filename>security-ex3.sar</filename> is described in <xref linkend="An_SRP_example-The_security_ex3.sar_jboss_service.xml_descriptor_for_the_SRP_services"/>. </para>
  <para>The example client side and server side login module configurations are described in  <xref linkend="An_SRP_example-The_client_side_standard_JAAS_configuration"/> and <xref linkend="An_SRP_example-The_server_side_XMLLoginConfig_configuration"/> give .
    </para>
  <example id="An_SRP_example-The_security_ex3.sar_jboss_service.xml_descriptor_for_the_SRP_services">
    <title>The security-ex3.sar jboss-service.xml Descriptor</title>
    <programlisting language="XML" role="XML">&lt;server&gt;
    &lt;!-- The custom JAAS login configuration that installs
         a Configuration capable of dynamically updating the
         config settings --&gt;

    &lt;mbean code=&quot;org.jboss.book.security.service.SecurityConfig&quot; 
           name=&quot;jboss.docs.security:service=LoginConfig-EX3&quot;&gt;
        &lt;attribute name=&quot;AuthConfig&quot;&gt;META-INF/login-config.xml&lt;/attribute&gt;
        &lt;attribute name=&quot;SecurityConfigName&quot;&gt;jboss.security:name=SecurityConfig&lt;/attribute&gt;
    &lt;/mbean&gt;

    &lt;!-- The SRP service that provides the SRP RMI server and server side
         authentication cache --&gt;
    &lt;mbean code=&quot;org.jboss.security.srp.SRPService&quot; 
           name=&quot;jboss.docs.security:service=SRPService&quot;&gt;
        &lt;attribute name=&quot;VerifierSourceJndiName&quot;&gt;srp-test/security-ex3&lt;/attribute&gt;
        &lt;attribute name=&quot;JndiName&quot;&gt;srp-test/SRPServerInterface&lt;/attribute&gt;
        &lt;attribute name=&quot;AuthenticationCacheJndiName&quot;&gt;srp-test/AuthenticationCache&lt;/attribute&gt;
        &lt;attribute name=&quot;ServerPort&quot;&gt;0&lt;/attribute&gt;
        &lt;depends&gt;jboss.docs.security:service=PropertiesVerifierStore&lt;/depends&gt;
    &lt;/mbean&gt;

    &lt;!-- The SRP store handler service that provides the user password verifier
         information --&gt;
    &lt;mbean code=&quot;org.jboss.security.ex3.service.PropertiesVerifierStore&quot;
           name=&quot;jboss.docs.security:service=PropertiesVerifierStore&quot;&gt;
        &lt;attribute name=&quot;JndiName&quot;&gt;srp-test/security-ex3&lt;/attribute&gt;
    &lt;/mbean&gt;
&lt;/server&gt;
</programlisting>
  </example>
  <para>
     The example services are the <literal>ServiceConfig</literal> and the <literal>PropertiesVerifierStore</literal> and <literal>SRPService</literal> MBeans. Note that the <literal>JndiName</literal> attribute of the <literal>PropertiesVerifierStore</literal> is equal to the <literal>VerifierSourceJndiName</literal> attribute of the <literal>SRPService</literal>, and that the <literal>SRPService</literal> depends on the <literal>PropertiesVerifierStore</literal>. This is required because the <literal>SRPService</literal> needs an implementation of the <literal>SRPVerifierStore</literal> interface for accessing user password verification information.
    </para>
  <example id="An_SRP_example-The_client_side_standard_JAAS_configuration">
    <title>The client side standard JAAS configuration</title>
    <programlisting>srp {
    org.jboss.security.srp.jaas.SRPLoginModule required
    srpServerJndiName=&quot;srp-test/SRPServerInterface&quot;
    ;
                    
    org.jboss.security.ClientLoginModule required
    password-stacking=&quot;useFirstPass&quot;
    ;
}; 
</programlisting>
  </example>
  <para>The client side login module configuration makes use of the <literal>SRPLoginModule</literal> with a <literal>srpServerJndiName</literal> option value that corresponds to the JBoss server component <literal>SRPService</literal> JndiName attribute value(<literal>srp-test/SRPServerInterface</literal>). The <literal>ClientLoginModule</literal> must also be configured with the <literal>password-stacking=&quot;useFirstPass&quot;</literal> value to propagate the user authentication credentials generated by the <literal>SRPLoginModule</literal> to the EJB invocation layer.
    </para>
  <example id="An_SRP_example-The_server_side_XMLLoginConfig_configuration">
    <title>The server side XMLLoginConfig configuration</title>
    <programlisting language="XML" role="XML">&lt;application-policy name=&quot;security-ex3&quot;&gt;
    &lt;authentication&gt;
        &lt;login-module code=&quot;org.jboss.security.srp.jaas.SRPCacheLoginModule&quot;
                      flag = &quot;required&quot;&gt;
            &lt;module-option name=&quot;cacheJndiName&quot;&gt;srp-test/AuthenticationCache&lt;/module-option&gt;
        &lt;/login-module&gt;
        &lt;login-module code=&quot;org.jboss.security.auth.spi.UsersRolesLoginModule&quot;
                      flag = &quot;required&quot;&gt;
            &lt;module-option name=&quot;password-stacking&quot;&gt;useFirstPass&lt;/module-option&gt;
        &lt;/login-module&gt;
    &lt;/authentication&gt;
&lt;/application-policy&gt;           
</programlisting>
  </example>
  <para>There are two issues to note about the server side login module configuration: </para>
  <orderedlist>
    <listitem>
      <para>The <literal>cacheJndiName=srp-test/AuthenticationCache</literal> configuration option tells the <literal>SRPCacheLoginModule</literal> the location of the <literal>CachePolicy</literal> that contains the <literal>SRPServerSession</literal> for users who have authenticated against the <literal>SRPService</literal>. This value corresponds to the <literal>SRPService</literal><literal>AuthenticationCacheJndiName</literal> attribute value. </para>
    </listitem>
    <listitem>
      <para>The configuration includes a <literal>UsersRolesLoginModule</literal> with the <literal>password-stacking=useFirstPass</literal> configuration option. You must use a second login module with the <literal>SRPCacheLoginModule</literal> because SRP is only an authentication technology. To set the principal&apos;s roles that in turn determine the associated permissions, a second login module must be configured to  accept the authentication credentials validated by the <literal>SRPCacheLoginModule</literal> . </para>
    </listitem>
  </orderedlist>
  <para>The <literal>UsersRolesLoginModule</literal> is augmenting the SRP authentication with properties file based authorization. The user&apos;s roles are obtained from the <literal>roles.properties</literal> file included in the EJB JAR.
    </para>
  <para>Run the example 3 client by executing the following command from the book examples directory:
    </para>
  <screen>[examples]$ ant -Dchap=security -Dex=3 run-example
...
run-example3:
     [echo] Waiting for 5 seconds for deploy...
     [java] Logging in using the &apos;srp&apos; configuration
     [java] Created Echo
     [java] Echo.echo()#1 = This is call 1
     [java] Echo.echo()#2 = This is call 2</screen>
  <para>In the <literal>examples/logs</literal> directory, the  <literal>ex3-trace.log</literal> file contains a  detailed trace of the client side of the SRP algorithm. The traces show step-by-step the construction of the public keys, challenges, session key and verification.
    </para>
  <para>Observe that the client takes a long time to run, relative to the other simple examples. The reason for this is the construction of the client&apos;s public key. This involves the creation of a cryptographically strong random number, and this process takes longer when it first executes.  Subsequent authentication attempts within  the same VM are much faster. </para>
  <para>Note that <literal>Echo.echo()#2</literal> fails with an authentication exception. The client code sleeps for 15 seconds after making the first call to demonstrate the behavior of the <literal>SRPService</literal> cache expiration. The <literal>SRPService</literal> cache policy timeout has been set to   10 seconds to force this issue. As discussed in <xref linkend="sect-Secure_Remote_Password_Example"/> you must set the cache timeout correctly, or handle re-authentication on failure.
    </para>
</section>
