<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chap-Secure_Remote_Password_Protocol">
  <title>Secure Remote Password Protocol</title>
  <para>
   The Secure Remote Password (SRP) protocol is an implementation of a public key exchange handshake described in the Internet standards working group request for comments 2945(RFC2945). The RFC2945 abstract states:
  </para>
  <blockquote>
    <para>This document describes a cryptographically strong network authentication mechanism known as the Secure Remote Password (SRP) protocol. This mechanism is suitable for negotiating secure connections using a user-supplied password, while eliminating the security problems traditionally associated with reusable passwords. This system also performs a secure key exchange in the process of authentication, allowing security layers (privacy and/or integrity protection) to be enabled during the session. Trusted key servers and certificate infrastructures are not required, and clients are not required to store or manage any long-term keys. SRP offers both security and deployment advantages over existing challenge-response techniques, making it an ideal drop-in replacement where secure password authentication is needed.
  </para>
  </blockquote>
  <para>The complete RFC2945 specification can be obtained from <ulink url="http://www.rfc-editor.org/rfc.html"/>. Additional information on the SRP algorithm and its history can be found at <ulink url="http://www-cs-students.stanford.edu/~tjw/srp/"/>.
  </para>
  <para>Algorithms like Diffie-Hellman and RSA are known as public key exchange algorithms. The concept of public key algorithms is that you have two keys, one public that is available to everyone, and one that is private and known only to you. When someone wants to send encrypted information to you, then encrypt the information using your public key. Only you are able to decrypt the information using your private key. Contrast this with the more traditional shared password based encryption schemes that require the sender and receiver to know the shared password. Public key algorithms eliminate the need to share passwords.
  </para>
  <para>
   The JBossSX framework includes an implementation of SRP that consists of the following elements:
  </para>
  <itemizedlist>
    <listitem>
      <para>
     An implementation of the SRP handshake protocol that is independent of any particular client/server protocol
    </para>
    </listitem>
    <listitem>
      <para>
     An RMI implementation of the handshake protocol as the default client/server SRP implementation
    </para>
    </listitem>
    <listitem>
      <para>
     A client side JAAS <literal>LoginModule</literal> implementation that uses the RMI implementation for use in authenticating clients in a secure fashion
    </para>
    </listitem>
    <listitem>
      <para>
     A JMX MBean for managing the RMI server implementation. The MBean allows the RMI server implementation to be plugged into a JMX framework and externalizes the configuration of the verification information store. It also establishes an authentication cache that is bound into the JBoss server JNDI namespace.
    </para>
    </listitem>
    <listitem>
      <para>
     A server side JAAS <literal>LoginModule</literal> implementation that uses the authentication cache managed by the SRP JMX MBean.
    </para>
    </listitem>
  </itemizedlist>
  <para>
   <xref linkend="The_Secure_Remote_Password_SRP_Protocol-The_JBossSX_components_of_the_SRP_client_server_framework."/> describes the key components involved in the JBossSX implementation of the SRP client/server framework.
  </para>
  <figure id="The_Secure_Remote_Password_SRP_Protocol-The_JBossSX_components_of_the_SRP_client_server_framework.">
    <title>The JBossSX components of the SRP client-server framework.</title>
    <mediaobject>
      <imageobject>
        <imagedata align="center" fileref="images/j2ee_chap8-13.jpg"/>
      </imageobject>
    </mediaobject>
  </figure>
  <para>On the client side, SRP shows up as a custom JAAS <literal>LoginModule</literal> implementation that communicates with the authentication server through an <literal>org.jboss.security.srp.SRPServerInterface</literal> proxy. A client enables authentication using SRP by creating a login configuration entry that includes the <literal>org.jboss.security.srp.jaas.SRPLoginModule</literal>. This module supports the following configuration options:
  </para>
  <variablelist>
    <varlistentry>
      <term>principalClassName</term>
      <listitem>
        <para>Constant value,  set to <literal>org.jboss.security.srp.jaas.SRPPrincipal</literal>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>srpServerJndiName</term>
      <listitem>
        <para> JNDI name of the <literal>SRPServerInterface</literal> object used to communicate with the SRP authentication server. If both <literal>srpServerJndiName</literal> and <literal>srpServerRmiUrl</literal> options are specified,  <literal>srpServerJndiName</literal> takes priority over  <literal>srpServerRmiUrl</literal>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>srpServerRmiUrl</term>
      <listitem>
        <para> RMI protocol URL string for the location of the <literal>SRPServerInterface</literal> proxy used to communicate  with the SRP authentication server.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>externalRandomA</term>
      <listitem>
        <para>Flag that specifies whether the random component of the client public key &quot;A&quot; should come from the user callback. This can be used to input a strong cryptographic random number coming from a hardware token. If set to <literal>true</literal>, the feature is activated.   </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>hasAuxChallenge</term>
      <listitem>
        <para>Flag that specifies whether a string will be sent to the server as an additional challenge for the server to validate. If the client session supports an encryption cipher then a temporary cipher will be created using the session private key and the challenge object sent as a <literal>javax.crypto.SealedObject</literal>. If set to <literal>true</literal>, the feature is activated. </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>multipleSessions</term>
      <listitem>
        <para>Flag that specifies whether  a given client may have multiple SRP login sessions active.
    If set to <literal>true</literal>, the feature is activated.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <para>Any other passed options  that do not match one of the previously named options are treated as a JNDI property to use for the environment passed to the <literal>InitialContext</literal> constructor. This is useful if the SRP server interface is not available from the default <literal>InitialContext</literal>.
  </para>
  <para>
   The <literal>SRPLoginModule</literal> and  the standard <literal>ClientLoginModule</literal>  must  be configured to allow  SRP authentication credentials to be used for access validation to security Java EE components. An example login configuration is described in <xref linkend="exam-Login_Configuration_Entry"/>.</para>
  <example id="exam-Login_Configuration_Entry">
    <title>Login Configuration Entry</title>
    <programlisting>srp {
    org.jboss.security.srp.jaas.SRPLoginModule required
    srpServerJndiName=&quot;SRPServerInterface&quot;
    ;
            
    org.jboss.security.ClientLoginModule required
    password-stacking=&quot;useFirstPass&quot;
    ;
};  
</programlisting>
  </example>
  <para>
   On the JBoss server side, there are two MBeans that manage the objects that collectively make up the SRP server. The primary service is the <literal>org.jboss.security.srp.SRPService</literal> MBean.  The other MBean is<classname>org.jboss.security.srp.SRPVerifierStoreService</classname>.</para>
  <para><literal>org.jboss.security.srp.SRPService</literal> is responsible for exposing an RMI accessible version of the SRPServerInterface as well as updating the SRP authentication session cache. </para>
  <para>The configurable SRPService MBean attributes include the following:
  </para>
  <variablelist>
    <varlistentry>
      <term>JndiName</term>
      <listitem>
        <para>Specifies the name from which the SRPServerInterface proxy should be available. This is the location where the <literal>SRPService</literal> binds the serializable dynamic proxy to the <literal>SRPServerInterface</literal>.  The default value is <literal>srp/SRPServerInterface</literal>.
    </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>VerifierSourceJndiName</term>
      <listitem>
        <para>Specifies the name of the <literal>SRPVerifierSource</literal> implementation  the <literal>SRPService</literal> must use. The source JNDI name defaults to  <literal>srp/DefaultVerifierSource</literal>.
    </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>AuthenticationCacheJndiName</term>
      <listitem>
        <para>Specifies the name under which the  <literal>org.jboss.util.CachePolicy</literal> authentication implementation  used for caching authentication information is bound. The SRP session cache is made available for use through this binding. The authentication JNDI cache defaults to <literal>srp/AuthenticationCache</literal>.
    </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>ServerPort</term>
      <listitem>
        <para>
     RMI port for the <literal>SRPRemoteServerInterface</literal>. The default value is 10099.
    </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>ClientSocketFactory</term>
      <listitem>
        <para>Optional custom <literal>java.rmi.server.RMIClientSocketFactory</literal> implementation class name used during the export of the <literal>SRPServerInterface</literal>. The default value is <literal>RMIClientSocketFactory</literal>.
    </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>ServerSocketFactory</term>
      <listitem>
        <para>Optional custom <literal>java.rmi.server.RMIServerSocketFactory</literal> implementation class name used during the export of the <literal>SRPServerInterface</literal>. The default value is <literal>RMIServerSocketFactory</literal>.
    </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>AuthenticationCacheTimeout</term>
      <listitem>
        <para>Cache policy timeout (in seconds). The default value is 1800 (30 minutes).
    </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>AuthenticationCacheResolution</term>
      <listitem>
        <para>Specifies the timed cache policy resolution (in seconds). This controls the interval between checks for timeouts. The default value is  60 (1 minute).
    </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>RequireAuxChallenge</term>
      <listitem>
        <para>Set if the client must supply an auxiliary challenge as part of the verify phase. This gives control over whether the <literal>SRPLoginModule</literal> configuration used by the client must have the <literal>useAuxChallenge</literal> option enabled.
    </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>OverwriteSessions</term>
      <listitem>
        <para>Specifies whether  a successful user authentication for an existing session should overwrite the current session. This controls the behavior of the server SRP session cache when clients have not enabled the multiple session per user mode. If set to <literal>false</literal>, the second user authentication attempt will succeed, however the resulting SRP session will not overwrite the previous SRP session state.
     The default value is <literal>false</literal>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>VerifierStoreJndiName</term>
      <listitem>
        <para>Specifies the location of the SRP password information store implementation that must be provided and made available through JNDI.  </para>
      </listitem>
    </varlistentry>
  </variablelist>
  <para><classname>org.jboss.security.srp.SRPVerifierStoreService</classname> is an example MBean service that binds an implementation of the <literal>SRPVerifierStore</literal> interface that uses a file of serialized objects as the persistent store. Although not realistic for a production environment, it does allow for testing of the SRP protocol and provides an example of the requirements for an <literal>SRPVerifierStore</literal> service. </para>
  <para>The configurable <literal>SRPVerifierStoreService</literal> MBean attributes include the following:
  </para>
  <variablelist>
    <varlistentry>
      <term>JndiName</term>
      <listitem>
        <para>JNDI name from which the <literal>SRPVerifierStore</literal> implementation should be available. If not specified it defaults to <literal>srp/DefaultVerifierSource</literal>.
    </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>StoreFile</term>
      <listitem>
        <para>Location of the user password verifier serialized object store file. This can be either a URL or a resource name to be found in the classpath. If not specified it defaults to <literal>SRPVerifierStore.ser</literal>.
    </para>
      </listitem>
    </varlistentry>
  </variablelist>
  <para>
   The <literal>SRPVerifierStoreService</literal> MBean also supports <parameter>addUser</parameter> and <parameter>delUser</parameter> operations for addition and deletion of users. The signatures are:
  </para>
  <programlisting language="Java" role="JAVA">public void addUser(String username, String password) throws IOException;
public void delUser(String username) throws IOException;
</programlisting>
  <para>
   An example configuration of these services is presented in <xref linkend="Providing_Password_Information_for_SRP-The_SRPVerifierStore_Interface"/>.
  </para>
  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="sect-Understanding_The_Algorithm.xml" encoding="UTF-8"/>
  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="sect-Configure_Secure_Remote_Password_Information.xml" encoding="UTF-8"/>
  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="sect-Secure_Remote_Password_Example.xml" encoding="UTF-8"/>
</chapter>
