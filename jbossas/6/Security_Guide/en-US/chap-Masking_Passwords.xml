<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<!-- Author: Joshua Wulf -->
<!-- Author email: jwulf@redhat.com -->

<!-- SME: Marcus Moyses <mmoyses@redhat.com> -->

<!-- Verified by: Marcus Moyses <mmoyses@redhat.com> -->
<!-- Verified on: 9 Sep 2010 -->

<!-- License: CC-SA-BY -->
<!-- Contains content from: Anil Saldhana http://community.jboss.org/wiki/maskingpasswordsinjbossasxmlconfiguration -->

<chapter id="Masking_Passwords">
  <title>Masking Passwords in XML Configuration</title>

  <para>
    Follow the instructions in this chapter to increase the security of your JBoss AS Installation by masking passwords that would otherwise be stored on the file system as clear text.
  </para>

  <section>
    <title>Password Masking Overview</title>
    <para>
      Passwords are secret authentication tokens that are used to limit access to resources to authorised parties only. In order for JBoss services to access password protected resources, the password must be made available to the JBoss service. This can be done by means of command line arguments passed to the JBoss Application Server on start up, however this is not practical in a production environment. In production environments, typically, passwords are made available to JBoss services by their inclusion in configuration files. 
    </para>
    <para>
      All JBoss configuration files should be stored on secure file systems, and should be readable by the JBoss Application Server process owner only. Additionally, you can mask the password in the configuration file for an added level of security. Follow the instructions in this chapter to replace a clear text password in a Microcontainer bean configuration with a password mask. Refer to <xref linkend="Encrypting_Data_Source_Passwords"/> for instructions on encrypting Data Source passwords; to <xref linkend="Encrypting_The_Keystore_Password_In_Tomcat"/> for instructions on encrypting the key store password in Tomcat; and to <xref linkend="Using_LdapExtLoginModule_with_JaasSecurityDomain"/> for instructions on encrypting the password for LdapExtLoginModule.
    </para>
   
    <note>
      <para>There is no such thing as impenetrable security. All good security measures merely increase the cost involved in unauthorised access of a system. Masking passwords is no exception - it is not impenetrable, but does defeat casual inspection of configuration files, and increases the amount of effort that will be required to extract the password in clear text.
      </para>
    </note>

    <procedure>
      <title>Masking a clear text password overview</title> 
      <step>
        <para>
          Generate a key pair to use to encrypt passwords. 
        </para>
      </step>
      <step>
        <para>
          Encrypt the key store password.
        </para>
      </step>
      <step>
        <para>
          Create password masks.
        </para>
      </step>
      <step>
        <para>
          Replace clear text passwords with their password masks.
        </para>
      </step>
    </procedure>
  </section>

  <section>
    <title>
      Generate a key store and a masked password
    </title>

    <formalpara>
      <title>Generate a key store</title>

      <para>
        Password masking uses a public/private key pair to encrypt passwords. You need to generate a key pair for use in password masking. By default JBoss Enterprise Application Platform 5 expects a key pair with the alias <filename>jboss</filename> in a key store at <filename>jboss-as/bin/password/password.keystore</filename>. The following procedures follow this default configuration. If you wish to change the key store location or key alias you will need to change the default configuration, and should refer to <xref linkend="sect-changing-password-masking-keystore"/> for instructions. 
      </para>
    </formalpara>

    <procedure id="proc-generate-keystore">
      <title>Generate a key pair and key store for password masking</title>
      <step>
        <para>
          At the command line, change directory to the <filename>jboss-as/bin/password</filename> directory.
        </para>
      </step>
      <step>
        <para>Use <command>keytool</command> to generate the key pair with the following command:</para>
        <screen><command>keytool -genkey -alias jboss -keyalg RSA -keysize 1024  -keystore password.keystore</command></screen>
        <formalpara>
          <title>Important:</title>
          <para>You must specify the same password for the key store and key pair</para>
        </formalpara>
      </step>
      <step>
        <formalpara>
          <title>Optional:</title>
          <para>Make the resulting password.keystore readable by the JBoss Application Server process owner only.</para>
        </formalpara>
        <para>On Unix-based systems this is accomplished by using the <command>chown</command> command to change ownership to the JBoss Application Server process owner, and <command>chmod 600 password.keystore</command> to make the file readable only by the owner.</para>
        <para>This step is recommended to increase the security of your server.</para>
        <para>
          Note: the JBoss Application Server process owner should not have interactive console login access. In that case you will be performing these operations as another user. Creating masked passwords requires read access to the key store, so you may wish to complete configuration of masked passwords before restricting the key store file permissions.
        </para>
      </step>
    </procedure>

    <para>For more on key stores and the <command>keytool</command> command, refer to <xref linkend="sect-keystore-background"/>.</para>
     
  </section>
  
  <section id="sect-encrypt-key-store-password">
    <title>Encrypt the key store password</title>

    <para>
      With password masking, passwords needed by Jboss services are not stored in clear text in xml configuration files. Instead they are stored in a file that is encrypted using a key pair that you provide.
    </para>

    <para>
      In order to decrypt this file and access the masked passwords at run time, JBoss Application Server needs to be able to use the key pair you created. You provide the key store password to JBoss Application Server by means of the JBoss Password Tool, <command>password_tool</command>. This tool will encrypt and store your key store password. Your key store password will then be available to the JBoss Password Tool for masking passwords, and to the JBoss Application Server for decrypting them at run time.
    </para>

    <procedure id="proc-encrypt-key-store-password">
      <title>Encrypt the key store password</title>
      <step>
        <para>At the command line, change to the <filename>jboss-as/bin</filename> directory.</para>
      </step>
      <step>
        <para>Run the password tool, using the command <command>./password_tool.sh</command> for Unix-based systems, or <command>password_tool.bat</command> for Windows-based systems.</para>
        <formalpara>
          <title>Result:</title>
          <para>The JBoss Password Tool will start, and will report '<command>Keystore is null. Please specify keystore below:</command>'.</para>
        </formalpara>
      </step>
      <step>
        <para>Select '<command>0: Encrypt Keystore Password</command>' by pressing 0, then Enter.</para>
        <formalpara>
          <title>Result:</title>
          <para>The password tool responds with '<command>Enter keystore password</command>'.</para>
        </formalpara>
      </step>
      <step>
        <para>Enter the key store password you specified in <xref linkend="proc-generate-keystore"/>.</para>
        <formalpara>
          <title>Result:</title>
          <para>The password tool responds with '<command>Enter Salt (String should be at least 8 characters)</command>'.</para>
        </formalpara>
      </step>
      <step>
        <para>Enter a random string of characters to aid with encryption strength.</para>
        <formalpara>
          <title>Result:</title>
          <para>The password tool responds with '<command>Enter Iterator Count (integer value)</command>'.</para>
        </formalpara>
      </step>
      <step>
        <para>Enter a whole number to aid with encryption strength.</para>
        <formalpara>
          <title>Result:</title>
          <para>The password tool responds with: '<command>Keystore Password encrypted into password/jboss_keystore_pass.dat</command>'.</para>
	      </formalpara>
      </step>
      <step>
        <para>Select '<command>5:Exit</command>' to exit.</para>
        <formalpara>
          <title>Result:</title>
          <para>The password tool will exit with the message: '<command>Keystore is null. Cannot store.</command>'. This is normal.</para>
        </formalpara>
      </step>
      <step>
        <formalpara>
          <title>Optional:</title>
          <para>Make the resulting file <filename>password/jboss_keystore_pass.dat</filename> readable by the JBoss Application Server process owner only.</para>
        </formalpara>
        <para>On Unix-based systems this is accomplished by using the <command>chown</command> command to change ownership to the JBoss Application Server process owner, and <command>chmod 600 jboss-keystore_pass.dat</command> to make the file readable only by the owner.</para>
        <para>This step is recommended to increase the security of your server. Be aware that if this encrypted key is compromised, the security offered by password masking is significantly reduced. This file should be stored on a secure file system.</para>
        <para>
          Note: the JBoss Application Server process owner should not have interactive console login access. In this case you will be performing these operations as another user. Creating masked passwords requires read access to the key store, so you may wish to complete configuration of masked passwords before restricting the key store file permissions.
        </para>
      </step>
    </procedure>

    <formalpara>
      <title>Note:</title>
      <para>
      You should only perform this key store password encryption procedure once. If you make a mistake entering the keystore password, or you change the key store at a later date, you should delete the <filename>jboss-keystore_pass.dat</filename> file and repeat the procedure. Be aware that if you change the key store any masked passwords that were previously generated will no longer function.
      </para>
    </formalpara>
  </section>

  <section>
    <title>Create password masks</title>

<!-- I opened https://jira.jboss.org/browse/JBPAPP-5046 about this - we need conceptual consistency here.
You create a password mask using the password_tool. 
The password mask is then placed into the configuration file instead of the clear text password.

At the moment the terminology in the tool is a mix of "passwords" and "domains". And "mask" and the idea of "masking" is not really used as a metaphor except in the chapter title. It's a mixed bag of metaphors that needs to be thinned out. 

To introduce the concepts we should stick to the masking metaphor, and introduce domains when we get to bean annotation, where we can just say: "put the password mask in as the value of the Securitydomain". Done. :-)
-->

    <para>
      The JBoss Password Tool maintains an encrypted password file <filename>jboss-as/bin/password/jboss_password_enc.dat</filename>. This file is encrypted using a key pair you provide to the password tool, and it contains the passwords that will be masked in configuration files. Passwords are stored and retrieved from this file by 'domain', an arbitrary unique identifier that you specify to the Password Tool when storing the password, and that you specify as part of the annotation that replaces that clear text password in configuration files. This allows the JBoss Application Server to retrieve the correct password from the file at run time. 
    </para>

    <formalpara>
      <title>Note:</title>
      <para>If you previously made the key store and encrypted key store password file readable only by the JBoss Application Server process owner, then you need to perform the following procedure as the JBoss Application Server process owner, or else make the keystore (<filename>jboss-as/bin/password/password.keystore</filename>) and encrypted key store password file  (<filename>jboss-as/bin/password/jboss_keystore_pass.dat</filename>) readable by your user, and the encrypted passwords file <filename>jboss-as/bin/password/jboss_password_enc.dat</filename> (if it already exists) read and writeable, while you perform this operation.</para>
    </formalpara>

    <procedure id="proc-create-password-masks">
      <title>Create password masks</title>
      <itemizedlist>
        <title>Prerequisites:</title>
        <listitem>
          <para>
            <xref linkend="proc-generate-keystore"/>.
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="proc-encrypt-key-store-password"/>.
          </para>
        </listitem>
      </itemizedlist>
      <step>
        <para>At the command line, change to the <filename>jboss-as/bin</filename> directory.</para>
      </step>
      <step>
        <para>Run the password tool, using the command <command>./password_tool.sh</command> for Unix-based systems, or <command>password_tool.bat</command> for Windows-based systems.</para>
        <formalpara>
          <title>Result:</title>
          <para>The JBoss Password Tool will start, and will report '<command>Keystore is null. Please specify keystore below:</command>'.</para>
        </formalpara>
      </step>
      <step>
        <para>Select '<command>1:Specify KeyStore</command>' by pressing 1 then Enter.</para>
        <formalpara>
          <title>Result:</title>
          <para>The password tool responds with '<command>Enter Keystore location including the file name</command>'.</para>
        </formalpara>
      </step>
      <step>
        <para>Enter the path to the key store you created in <xref linkend="proc-generate-keystore"/>. You can specify an absolute path, or the path relative to <filename>jboss-as/bin</filename>. This should be <filename>password/password.keystore</filename>, unless you have performed an advanced installation and changed the defaults as per <xref linkend="sect-changing-password-masking-keystore"/>.</para>
        <formalpara>
          <title>Result:</title>
          <para>The password tool responds with '<command>Enter Keystore alias</command>'.</para>
        </formalpara>
      </step>
      <step>
        <para>Enter the key alias. This should be <classname>jboss</classname>, unless you have performed an advanced installation and changed the defaults as per <xref linkend="sect-changing-password-masking-keystore"/>. </para>
        <formalpara>
          <title>Result:</title>  
          <para>If the key store and key alias are accessible, the password tool will respond with some log4j WARNING messages, then the line '<command>Loading domains [</command>', followed by any existing password masks, and the main menu.</para>
        </formalpara>
      </step>
      <step>
        <para>
          Select '<command>2:Create Password</command>' by pressing 2, then Enter
        </para>
        <formalpara>
          <title>Result:</title>
          <para>The password tool responds with: '<command>Enter security domain:</command>'.</para>
        </formalpara>
      </step>
      <step>
        <para>
          Enter a name for the password mask. This is an arbitrary unique name that you will use to identify the password mask in configuration files.
        </para>
        <formalpara>
          <title>Result:</title>
          <para>
            The password tool responds with: '<command>Enter passwd:</command>'.
          </para>
        </formalpara>
      </step>
      <step>
        <para>Enter the password that you wish to mask.</para>
        <formalpara>
          <title>Result:</title>      
          <para>
            The password tool responds with: '<command>Password created for domain:<replaceable>mask name</replaceable></command>'
          </para>
        </formalpara>
      </step>
      <step>
        <para>Repeat the password mask creation process to create masks for all passwords you wish to mask.</para>
      </step>
      <step>
        <para>Exit the program by choosing '<command>5:Exit</command>'</para>
      </step>
    </procedure>
  </section>

  <section>
    <title>Replace clear text passwords with their password masks</title>

    <para>
      Clear text passwords in xml configuration files can be replaced with password masks by changing the property assignment for an annotation. Generate password masks for any clear text password that you wish to mask in Microcontainer bean configuration files by following <xref linkend="proc-create-password-masks"/>. Then replace the configuration occurrence of each clear text password with an annotation referencing its mask. 
    </para>

    <para>The general form of the annotation is:</para>

    <example>
      <title>General form of password mask annotation</title>
      <screen>&lt;annotation&gt;@org.jboss.security.integration.password.Password(securityDomain=<replaceable>MASK_NAME</replaceable>,methodName=set<replaceable>PROPERTY_NAME</replaceable>)&lt;/annotation&gt;</screen>
    </example>

  </section>

  <section id="sect-changing-password-masking-keystore">
    <title>Changing the password masking defaults</title>

    <para>
      JBoss Enterprise Application Platform 5 ships with server profiles preconfigured for password masking. By default the server profiles are configured to use the keystore <filename>jboss-as/bin/password/password.keystore</filename>, and the key alias <filename>jboss</filename>. If you store the key pair used for password masking elsewhere, or under a different alias, you will need to update the server profiles with the new location or key alias. 
    </para>

    <para>
      The password masking key store location and key alias is specified in the file <filename>deploy/security/security-jboss-beans.xml</filename> under each of the included JBoss Application Server server profiles. 
    </para>
  
    <example>
      <title>Preconfigured Password Masking defaults in security-jboss-beans.xml</title>
      <screen><![CDATA[<!-- Password Mask Management Bean-->
   <bean name="JBossSecurityPasswordMaskManagement"
         class="org.jboss.security.integration.password.PasswordMaskManagement" >
         <property name="keyStoreLocation">password/password.keystore</property>
         <property name="keyStoreAlias">jboss</property>
         <property name="passwordEncryptedFileName">password/jboss_password_enc.dat</property>
         <property name="keyStorePasswordEncryptedFileName">password/jboss_keystore_pass.dat</property>
   </bean>]]>
        </screen>
    </example>
  </section>

</chapter>
