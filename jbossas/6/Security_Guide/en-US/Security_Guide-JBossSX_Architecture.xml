<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">

   <chapter id="The_JBoss_Security_Extension_Architecture">
      <title>The JBoss Security Extension Architecture</title>
      <para>
         The preceding discussion of the general JBoss security layer has stated that the JBossSX security extension framework is an implementation of the security layer interfaces. This is the primary               purpose of the JBossSX framework. The details of the implementation are interesting in that it offers a great deal of customization for integration into existing security infrastructures. A security         infrastructure can be anything from a database or LDAP server to a sophisticated security software suite. The integration flexibility is achieved using the pluggable authentication model available           in the JAAS framework.
      </para>

      <para>
         The heart of the JBossSX framework is <literal>org.jboss.security.plugins.JaasSecurityManager</literal>. This is the default implementation of the <literal>AuthenticationManager</literal> and                <literal>RealmMapping</literal> interfaces.                                                                                                                                                                    <xref linkend="The_JBoss_Security_Extension_Architecture-The_relationship_between_the_security_domain_component_deployment_descriptor_value_the_component_container_and_the_JaasSecurityManager." />           shows how the <literal>JaasSecurityManager</literal> integrates into the EJB and web container layers based on the <literal>security-domain</literal> element of the corresponding component                   deployment descriptor.
      </para>

      <figure id="The_JBoss_Security_Extension_Architecture-The_relationship_between_the_security_domain_component_deployment_descriptor_value_the_component_container_and_the_JaasSecurityManager.">
         <title>The relationship between the security-domain component deployment descriptor value, the component container and the JaasSecurityManager.</title>
         <mediaobject>
            <imageobject>
               <imagedata align="center" fileref="images/j2ee_chap8-9.jpg" />
            </imageobject>
         </mediaobject>
      </figure>

      <para>
         <xref linkend="The_JBoss_Security_Extension_Architecture-The_relationship_between_the_security_domain_component_deployment_descriptor_value_the_component_container_and_the_JaasSecurityManager." />           depicts an enterprise application that contains both EJBs and web content secured under the security domain <literal>jwdomain</literal>. The EJB and web containers have a request interceptor                 architecture that includes a security interceptor, which enforces the container security model. At deployment time, the <literal>security-domain</literal> element value in the                                <literal>jboss.xml</literal> and <literal>jboss-web.xml</literal> descriptors is used to obtain the security manager instance associated with the container. The security interceptor then uses the            security manager to perform its role. When a secured component is requested, the security interceptor delegates security checks to the security manager instance associated with the container.
      </para>

      <para>
         The JBossSX <literal>JaasSecurityManager</literal> implementation performs security checks based on the information associated with the <literal>Subject</literal> instance that results from                  executing the JAAS login modules configured under the name matching the <literal>security-domain</literal> element value. We will drill into the <literal>JaasSecurityManager</literal> implementation         and its use of JAAS in the following section.
      </para>

      <section id="The_JBoss_Security_Extension_Architecture-How_the_JaasSecurityManager_Uses_JAAS">
         <title>How the JaasSecurityManager Uses JAAS</title>
         <para>
            The <literal>JaasSecurityManager</literal> uses the JAAS packages to implement the <literal>AuthenticationManager</literal> and <literal>RealmMapping</literal> interface behavior. In particular,             its behavior derives from the execution of the login module instances that are configured under the name that matches the security domain to which the <literal>JaasSecurityManager</literal> has              been assigned. The login modules implement the security domain&#39;s principal authentication and role-mapping behavior. Thus, you can use the <literal>JaasSecurityManager</literal> across                   different security domains simply by plugging in different login module configurations for the domains.
         </para>

         <para>
            To illustrate the details of the <literal>JaasSecurityManager</literal>&#39;s usage of the JAAS authentication process, you will walk through a client invocation of an EJB home method invocation.            The prerequisite setting is that the EJB has been deployed in the JBoss server and its home interface methods have been secured using <literal>method-permission</literal> elements in the                     <literal>ejb-jar.xml</literal> descriptor, and it has been assigned a security domain named <literal>jwdomain</literal> using the <literal>jboss.xml</literal> descriptor                                      <literal>security-domain</literal> element.
         </para>

         <figure id="How_the_JaasSecurityManager_Uses_JAAS-An_illustration_of_the_steps_involved_in_the_authentication_and_authorization_of_a_secured_EJB_home_method_invocation.">
            <title>An illustration of the steps involved in the authentication and authorization of a secured EJB home method invocation.</title>
            <mediaobject>
               <imageobject>
                  <imagedata align="center" fileref="images/authsteps.png" />
               </imageobject>
            </mediaobject>
         </figure>

         <para>
            <xref linkend="How_the_JaasSecurityManager_Uses_JAAS-An_illustration_of_the_steps_involved_in_the_authentication_and_authorization_of_a_secured_EJB_home_method_invocation." /> provides a view of             the client to server communication we will discuss. The numbered steps shown are:
         </para>

         <orderedlist>
            <listitem>
               <para>
                  The client first has to perform a JAAS login to establish the principal and credentials for authentication, and this is labeled <emphasis>Client Side Login</emphasis> in the figure. This is                  how clients establish their login identities in JBoss. Support for presenting the login information via JNDI <literal>InitialContext</literal> properties is provided via an alternate                         configuration. A JAAS login entails creating a <literal>LoginContext</literal> instance and passing the name of the configuration to use. The configuration name is <literal>other</literal>.                  This one-time login associates the login principal and credentials with all subsequent EJB method invocations. Note that the process might not authenticate the user. The nature of the                        client-side login depends on the login module configuration that the client uses. In this example, the <literal>other</literal> client-side login configuration entry is set up to use the                     <literal>ClientLoginModule</literal> module (an <literal>org.jboss.security.ClientLoginModule</literal>). This is the default client side module that simply binds the username and password                   to the JBoss EJB invocation layer for later authentication on the server. The identity of the client is not authenticated on the client.
               </para>
            </listitem>
            <listitem>
               <para>
                  Later, the client obtains the EJB home interface and attempts to create a bean. This event is labeled as <emphasis>Home Method Invocation</emphasis>. This results in a home interface method                  invocation being sent to the JBoss server. The invocation includes the method arguments passed by the client along with the user identity and credentials from the client-side JAAS login                      performed in step 1.
               </para>
            </listitem>
            <listitem>
               <para>
                  On the server side, the security interceptor first requires authentication of the user invoking the call, which, as on the client side, involves a JAAS login.
               </para>
            </listitem>
            <listitem>
               <para>
                  The security domain under which the EJB is secured determines the choice of login modules. The security domain name is used as the login configuration entry name passed to the                                <literal>LoginContext</literal> constructor. The EJB security domain is <literal>jwdomain</literal>. If the JAAS login authenticates the user, a JAAS <literal>Subject</literal> is created                    that contains the following in its <literal>PrincipalsSet</literal>:
               </para>

               <itemizedlist>
                  <listitem>
                     <para>
                        A <literal>java.security.Principal</literal> that corresponds to the client identity as known in the deployment security environment.
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        A <literal>java.security.acl.Group</literal> named <literal>Roles</literal> that contains the role names from the application domain to which the user has been assigned.                                      <literal>org.jboss.security.SimplePrincipal</literal> objects are used to represent the role names; <literal>SimplePrincipal</literal> is a simple string-based implementation of                              <literal>Principal</literal>. These roles are used to validate the roles assigned to methods in <literal>ejb-jar.xml</literal> and the                                                                         <literal>EJBContext.isCallerInRole(String)</literal> method implementation.
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        An optional <literal>java.security.acl.Group</literal> named <literal>CallerPrincipal</literal>, which contains a single <literal>org.jboss.security.SimplePrincipal</literal> that                            corresponds to the identity of the application domain&#39;s caller. The <literal>CallerPrincipal</literal> sole group member will be the value returned by the                                                 <literal>EJBContext.getCallerPrincipal()</literal> method. The purpose of this mapping is to allow a <literal>Principal</literal> as known in the operational security environment                             to map to a <literal>Principal</literal> with a name known to the application. In the absence of a <literal>CallerPrincipal</literal> mapping the deployment security environment                              principal is used as the <literal>getCallerPrincipal</literal> method value. That is, the operational principal is the same as the application domain principal.
                     </para>
                  </listitem>
               </itemizedlist>
            </listitem>
            <listitem>
               <para>
                  The final step of the security interceptor check is to verify that the authenticated user has permission to invoke the requested method This is labeled as                                                     <emphasis>Server Side Authorization</emphasis> in                                                                                                                                                              <xref linkend="How_the_JaasSecurityManager_Uses_JAAS-An_illustration_of_the_steps_involved_in_the_authentication_and_authorization_of_a_secured_EJB_home_method_invocation." />.                               Performing the authorization this entails the following steps:
               </para>

               <itemizedlist>
                  <listitem>
                     <para>
                        Obtain the names of the roles allowed to access the EJB method from the EJB container. The role names are determined by <literal>ejb-jar.xml</literal> descriptor role-name elements of                        all <literal>method-permission</literal> elements containing the invoked method.
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        If no roles have been assigned, or the method is specified in an <literal>exclude-list</literal> element, then access to the method is denied. Otherwise, the                                                  <literal>doesUserHaveRole</literal> method is invoked on the security manager by the security interceptor to see if the caller has one of the assigned role names. This method iterates                        through the role names and checks if the authenticated user&#39;s Subject <literal>Roles</literal> group contains a <literal>SimplePrincipal</literal> with the assigned role name.                            Access is allowed if any role name is a member of the <literal>Roles</literal> group. Access is denied if none of the role names are members.
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        If the EJB was configured with a custom security proxy, the method invocation is delegated to it. If the security proxy wants to deny access to the caller, it will throw a                                    <literal>java.lang.SecurityException</literal>. If no <literal>SecurityException</literal> is thrown, access to the EJB method is allowed and the method invocation passes to the next                         container interceptor. Note that the <literal>SecurityProxyInterceptor</literal> handles this check and this interceptor is not shown.
                     </para>
                  </listitem>
               </itemizedlist>
            </listitem>
         </orderedlist>

         <para>
            Every secured EJB method invocation, or secured web content access, requires the authentication and authorization of the caller because security information is handled as a stateless attribute of            the request that must be presented and validated on each request. This can be an expensive operation if the JAAS login involves client-to-server communication. Because of this, the                           <literal>JaasSecurityManager</literal> supports the notion of an authentication cache that is used to store principal and credential information from previous successful logins. You can specify              the authentication cache instance to use as part of the <literal>JaasSecurityManager</literal> configuration as you will see when the associated MBean service is discussed in following section.              In the absence of any user-defined cache, a default cache that maintains credential information for a configurable period of time is used.
         </para>
      </section>

      <section id="The_JBoss_Security_Extension_Architecture-The_JaasSecurityManagerService_MBean">
         <title>The JaasSecurityManagerService MBean</title>
         <para>
            The <literal>JaasSecurityManagerService</literal> MBean service manages security managers. Although its name begins with <emphasis>Jaas</emphasis>, the security managers it handles need not use              JAAS in their implementation. The name arose from the fact that the default security manager implementation is the <literal>JaasSecurityManager</literal>. The primary role of the                             <literal>JaasSecurityManagerService</literal> is to externalize the security manager implementation. You can change the security manager implementation by providing an alternate implementation of            the <literal>AuthenticationManager</literal> and <literal>RealmMapping</literal> interfaces.
         </para>

         <para>
            The second fundamental role of the <literal>JaasSecurityManagerService</literal> is to provide a JNDI <literal>javax.naming.spi.ObjectFactory</literal> implementation to allow for simple                     code-free management of the JNDI name to security manager implementation mapping. It has been mentioned that security is enabled by specifying the JNDI name of the security manager implementation            via the <literal>security-domain</literal> deployment descriptor element. When you specify a JNDI name, there has to be an object-binding there to use. To simplify the setup of the JNDI name to              security manager bindings, the <literal>JaasSecurityManagerService</literal> manages the association of security manager instances to names by binding a next naming system reference with itself              as the JNDI ObjectFactory under the name <literal>java:/jaas</literal>. This allows one to use a naming convention of the form <literal>java:/jaas/XYZ</literal> as the value for the                          <literal>security-domain</literal> element, and the security manager instance for the <literal>XYZ</literal> security domain will be created as needed for you. The security manager for the domain            <literal>XYZ</literal> is created on the first lookup against the <literal>java:/jaas/XYZ</literal> binding by creating an instance of the class specified by the                                              <literal>SecurityManagerClassName</literal> attribute using a constructor that takes the name of the security domain. For example, consider the following container security configuration snippet:
         </para>

         <important>
            <title>java:/jaas prefix is no longer mandatory</title>
            <para>
               In previous versions of JBoss, the <literal>java:/jaas</literal> prefix in each <literal>securitydomain</literal>  deployment descrptor element was required to correctly bind the JNDI name to                the security manager bindings. As of JBoss AS 6, it is possible to specify the name of the <literal>securitydomain</literal> only in <literal>jboss.xml</literal> and                                          <literal>jboss-web.xml</literal>. The <literal>java:/jaas</literal> prefix is still supported however, and remains for backwards compatibility.
            </para>
         </important>

         <programlisting>&lt;jboss&gt;
    &lt;!-- Configure all containers to be secured under the &quot;hades&quot; security domain --&gt;
    &lt;security-domain&gt;hades&lt;/security-domain&gt;
    &lt;!-- ... --&gt;
&lt;/jboss&gt; 
         </programlisting>

         <para>
            Any lookup of the name <literal>hades</literal> will return a security manager instance that has been associated with the security domain named <literal>hades</literal>. This security manager                will implement the AuthenticationManager and RealmMapping security interfaces and will be of the type specified by the <literal>JaasSecurityManagerService</literal>                                           <literal>SecurityManagerClassName</literal> attribute.
         </para>

         <para>
            The <literal>JaasSecurityManagerService</literal> MBean is configured by default for use in the standard JBoss distribution, and you can often use the default configuration as is. The                        configurable attributes of the <literal>JaasSecurityManagerService</literal> include:
         </para>

         <itemizedlist>
            <listitem>
               <para>
                  <emphasis role="bold">SecurityManagerClassName</emphasis>: The name of the class that provides the security manager implementation. The implementation must support both the                                   <literal>org.jboss.security.AuthenticationManager</literal> and <literal>org.jboss.security.RealmMapping</literal> interfaces. If not specified this defaults to the JAAS-based                                <literal>org.jboss.security.plugins.JaasSecurityManager</literal>.
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis role="bold">CallbackHandlerClassName</emphasis>: The name of the class that provides the <literal>javax.security.auth.callback.CallbackHandler</literal> implementation used by the                  <literal>JaasSecurityManager</literal>. You can override the handler used by the <literal>JaasSecurityManager</literal> if the default implementation                                                          (<literal>org.jboss.security.auth.callback.SecurityAssociationHandler</literal>) does not meet your needs. This is a rather deep configuration that generally should not be set unless you                     know what you are doing.
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis role="bold">SecurityProxyFactoryClassName</emphasis>: The name of the class that provides the <literal>org.jboss.security.SecurityProxyFactory</literal> implementation. If not                      specified this defaults to <literal>org.jboss.security.SubjectSecurityProxyFactory</literal>.
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis role="bold">AuthenticationCacheJndiName</emphasis>: Specifies the location of the security credential cache policy. This is first treated as an <literal>ObjectFactory</literal>                     location capable of returning <literal>CachePolicy</literal> instances on a per-security-domain basis. This is done by appending the name of the security domain to this name when looking up                  the <literal>CachePolicy</literal> for a domain. If this fails, the location is treated as a single <literal>CachePolicy</literal> for all security domains. As a default, a timed cache                       policy is used.
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis role="bold">DefaultCacheTimeout</emphasis>: Specifies the default timed cache policy timeout in seconds. The default value is 1800 seconds (30 minutes). The value you use for the                   timeout is a tradeoff between frequent authentication operations and how long credential information may be out of sync with respect to the security information store. If you want to                         disable caching of security credentials, set this to 0 to force authentication to occur every time. This has no affect if the <literal>AuthenticationCacheJndiName</literal> has been changed                  from the default value.
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis role="bold">DefaultCacheResolution</emphasis>: Specifies the default timed cache policy resolution in seconds. This controls the interval at which the cache current timestamp is                    updated and should be less than the <literal>DefaultCacheTimeout</literal> in order for the timeout to be meaningful. The default resolution is 60 seconds(1 minute). This has no affect if                    the <literal>AuthenticationCacheJndiName</literal> has been changed from the default value.
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis role="bold">DefaultUnauthenticatedPrincipal</emphasis>: Specifies the principal to use for unauthenticated users. This setting makes it possible to set default permissions for                      users who have not been authenticated.
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis role="bold">DefaultCacheFlushPeriod</emphasis>: Specifies the default period of time in seconds that the authentication cache will flush expired entries. Default value is 3600 or                   one hour.
               </para>
            </listitem>
         </itemizedlist>

         <para>
            The <literal>JaasSecurityManagerService</literal> also supports a number of useful operations. These include flushing any security domain authentication cache at runtime, getting the list of                 active users in a security domain authentication cache, and any of the security manager interface methods.
         </para>

         <para>
            Flushing a security domain authentication cache can be used to drop all cached credentials when the underlying store has been updated and you want the store state to be used immediately. The                 MBean operation signature is: <literal>public void flushAuthenticationCache(String securityDomain)</literal>.
         </para>

         <para>
            This can be invoked programmatically using the following code snippet:
         </para>

         <programlisting>MBeanServer server = ...;
String jaasMgrName = &quot;jboss.security:service=JaasSecurityManager&quot;;
ObjectName jaasMgr = new ObjectName(jaasMgrName);
Object[] params = {domainName};
String[] signature = {&quot;java.lang.String&quot;};
server.invoke(jaasMgr, &quot;flushAuthenticationCache&quot;, params, signature);
         </programlisting>

         <para>
            Getting the list of active users provides a snapshot of the <literal>Principals</literal> keys in a security domain authentication cache that are not expired. The MBean operation signature is:               <literal>public List getAuthenticationCachePrincipals(String securityDomain)</literal>.
         </para>

         <para>
            This can be invoked programmatically using the following code snippet:
         </para>

         <programlisting>MBeanServer server = ...;
String jaasMgrName = &quot;jboss.security:service=JaasSecurityManager&quot;;
ObjectName jaasMgr = new ObjectName(jaasMgrName);
Object[] params = {domainName};
String[] signature = {&quot;java.lang.String&quot;};
List users = (List) server.invoke(jaasMgr, &quot;getAuthenticationCachePrincipals&quot;, 
                                  params, signature);
         </programlisting>

         <para>
            The security manager has a few additional access methods.
         </para>

         <programlisting>public boolean isValid(String securityDomain, Principal principal, Object credential);
public Principal getPrincipal(String securityDomain, Principal principal);
public boolean doesUserHaveRole(String securityDomain, Principal principal, 
                                Object credential, Set roles);
public Set getUserRoles(String securityDomain, Principal principal, Object credential);
         </programlisting>

         <para>
            They provide access to the corresponding <literal>AuthenticationManager</literal> and <literal>RealmMapping</literal> interface method of the associated security domain named by the                          <literal>securityDomain</literal> argument.
         </para>

         <section id="The_JaasSecurityManagerService_MBean-The_JNDIBasedSecurityManagement_Bean">
            <title>The JNDIBasedSecurityManagement Bean</title>
            <para>
               In AS 6 most MBeans were replaced by <emphasis>Micro Container</emphasis> (MC) Beans. <literal>JaasSecurityManagerService</literal> was not removed to maintain compatibility with previous                    versions but most of its functionalities are done by the <literal>JNDIBasedSecurityManagement</literal> MC Bean now. This Bean is located in <literal>conf/bootstrap/security.xml</literal>.
            </para>

            <para>
               In <xref linkend="The_JNDIBasedSecurityManagement_Bean-Setting_custom_values." /> an example of how to set up the <literal>AuthenticationManager</literal> class,                                              <literal>CallbackHandler</literal> class and default values for the authentication cache is shown:
            </para>

            <example id="The_JNDIBasedSecurityManagement_Bean-Setting_custom_values.">
               <title>Setting custom values for the JNDIBasedSecurityManagement Bean</title>
                  <programlisting>&lt;bean name=&quot;JNDIBasedSecurityManagement&quot;
      class=&quot;org.jboss.security.integration.JNDIBasedSecurityManagement&quot;&gt;
   &lt;property name=&quot;authenticationMgrClass&quot;&gt;org.example.MyAuthenticationManager&lt;/property&gt;
   &lt;property name=&quot;defaultCacheTimeout&quot;&gt;1800&lt;/property&gt;
   &lt;property name=&quot;defaultCacheResolution&quot;&gt;60&lt;/property&gt;
   &lt;property name=&quot;defaultCacheFlushPeriod&quot;&gt;3600&lt;/property&gt;
   &lt;property name=&quot;callBackHandler&quot;&gt;&lt;inject bean=&quot;CallbackHandler&quot;/&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;bean name=&quot;CallbackHandler&quot; class=&quot;org.example.MyCallbackHandler&quot;/&gt;
                  </programlisting>
            </example>
         </section>
      </section>

      <section id="The_JBoss_Security_Extension_Architecture-The_JaasSecurityDomain_Bean">
         <title>The JaasSecurityDomain Bean</title>
            <para>
               The <literal>org.jboss.security.plugins.JaasSecurityDomain</literal> is an extension of <literal>JaasSecurityManager</literal> that adds the notion of a <literal>KeyStore</literal>, a JSSE                   <literal>KeyManagerFactory</literal> and a <literal>TrustManagerFactory</literal> for supporting SSL and other cryptographic use cases. The additional configurable attributes of the                          <literal>JaasSecurityDomain</literal> include:
            </para>

            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="bold">keyStoreType</emphasis>: The type of the <literal>KeyStore</literal> implementation. This is the type argument passed to the                                                             <literal>java.security.KeyStore.getInstance(String type)</literal> factory method. The default is <literal>JKS</literal>.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">keyStoreURL</emphasis>: A URL to the location of the <literal>KeyStore</literal> database. This is used to obtain an <literal>InputStream</literal> to initialize                        the <literal>KeyStore</literal>. If the string is not a value URL, it is treated as a file.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">keyStorePass</emphasis>: The password associated with the <literal>KeyStore</literal> database contents. The <literal>KeyStorePass</literal> is also used in                             combination with the <literal>Salt</literal> and <literal>IterationCount</literal> attributes to create a PBE secret key used with the encode/decode operations. The                                           <literal>keyStorePass</literal> attribute value format is one of the following:
                  </para>

                  <itemizedlist>
                     <listitem>
                        <para>
                           The plaintext password for the <literal>KeyStore</literal>. The <literal>toCharArray()</literal> value of the string is used without any manipulation.
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                           A command to execute to obtain the plaintext password. The format is <literal>{EXT}...</literal> where the <literal>...</literal> is the exact command line that will be passed to                             the <literal>Runtime.exec(String)</literal> method to execute a platform-specific command. The first line of the command output is used as the password.
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                           A class to create to obtain the plaintext password. The format is <literal>{CLASS}classname[:ctorarg]</literal> where the <literal>[:ctorarg]</literal> is an optional string that                             will be passed to the constructor when instantiating the <literal>classname</literal>. The password is obtained from classname by invoking a <literal>toCharArray()</literal> method                           if found, otherwise, the <literal>toString()</literal> method is used.
                        </para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">keyStoreAlias</emphasis>: Alias of the <literal>KeyStore</literal> containing the certificate to be used.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">keyStoreProvider</emphasis>: Security <literal>Provider</literal> of the <literal>KeyStore</literal>.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">keyStoreProviderArgument</emphasis>: Argument to be passed to the constructor of the <literal>KeyStore</literal> security <literal>Provider</literal>.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">keyManagerFactoryProvider</emphasis>: Security <literal>Provider</literal> of the <literal>KeyManagerFactory</literal>.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">keyManagerFactoryAlgorithm</emphasis>: Algorithm of the <literal>KeyManagerFactory</literal>.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">salt</emphasis>: The <literal>PBEParameterSpec</literal> salt value.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">iterationCount</emphasis>: The <literal>PBEParameterSpec</literal> iteration count value.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">trustStoreType</emphasis>: The type of the <literal>TrustStore</literal> implementation. This is the type argument passed to the                                                         <literal>java.security.KeyStore.getInstance(String type)</literal> factory method. The default is <literal>JKS</literal>.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">trustStoreURL</emphasis>: A URL to the location of the <literal>TrustStore</literal> database. This is used to obtain an <literal>InputStream</literal> to                               initialize the <literal>KeyStore</literal>. If the string is not a value URL, it is treated as a file.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">trustStorePass</emphasis>: The password associated with the trust store database contents. The <literal>trustStorePass</literal> has the same configuration options                      as the <literal>keyStorePass</literal>.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">trustStoreProvider</emphasis>: Security <literal>Provider</literal> of the <literal>TrustStore</literal>.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">trustStoreProviderArgument</emphasis>: Argument to be passed to the constructor of the <literal>TrustStore</literal> security <literal>Provider</literal>.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">trustManagerFactoryProvider</emphasis>: Security <literal>Provider</literal> of the <literal>TrustManagerFactory</literal>.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">trustManagerFactoryAlgorithm</emphasis>: Algorithm of the <literal>TrustManagerFactory</literal>.
                  </para>
               </listitem>
            </itemizedlist>

            <para>
               In <xref linkend="The_JaasSecurityDomain_Bean-JaasSecurityDomain_example." /> an example <literal>JaasSecurityDomain</literal> Bean is shown:
            </para>

            <example id="The_JaasSecurityDomain_Bean-JaasSecurityDomain_example.">
               <title>JaasSecurityDomain example</title>
               <programlisting>&lt;bean name=&quot;example&quot; class=&quot;org.jboss.security.plugins.JaasSecurityDomain&quot;&gt;
      &lt;constructor&gt;
         &lt;parameter&gt;example&lt;/parameter&gt;
      &lt;/constructor&gt;
      &lt;property name=&quot;keyStorePass&quot;&gt;changeit&lt;/property&gt;
      &lt;property name=&quot;keyStoreURL&quot;&gt;resource:localhost.keystore&lt;/property&gt;
      &lt;!-- introduce a JMX annotation to export this bean as an MBean --&gt;
      &lt;annotation&gt;@org.jboss.aop.microcontainer.aspects.jmx.JMX
              (name=&quot;jboss.security:service=JaasSecurityDomain,domain=example&quot;,
               exposedInterface=org.jboss.security.plugins.JaasSecurityDomainMBean.class)
      &lt;/annotation&gt;
   &lt;/bean&gt;
               </programlisting>
            </example>

            <important>
               <title>JaasSecurityDomain can still be deployed as a MBean</title>
               <para>
                  To maintain compatibility with previous versions, <literal>JaasSecurityDomain</literal> can still be deployed as a MBean.
               </para>
            </important>
         </section>
   </chapter>
