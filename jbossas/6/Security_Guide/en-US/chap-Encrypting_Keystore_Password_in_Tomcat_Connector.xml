<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="Encrypting_The_Keystore_Password_In_Tomcat">
  <title>Encrypting the Keystore Password in a Tomcat Connector</title>
  <para> 
    SSL with Tomcat requires a secure connector. This means that the keystore/truststore password cannot be passed as an attribute in the connector element of Tomcat's <filename>server.xml</filename>.
  </para>
  <para>
A working understanding of the JaasSecurityDomain that supports keystores, truststores, and password based encryption is advised. Please see <xref linkend="chap-Secure_Remote_Password_Protocol"/> for more information.
  </para>
<!--BZ 629141 jbossweb.sar replaces outdated service archive name-->  <para>
The first step is to add a connector element in <filename>server.xml</filename> in <filename>$JBOSS_HOME/server/$PROFILE/deploy/jbossweb.sar</filename>.
  </para>
  <programlisting language="XML">
  <![CDATA[
<!-- SSL/TLS Connector with encrypted keystore password configuration  -->
      <Connector protocol="HTTP/1.1" SSLEnabled="true" 
           port="8443" address="${jboss.bind.address}"
           scheme="https" secure="true" clientAuth="false"
           sslProtocol="TLS" 
           securityDomain="encrypt-keystore-password"
           SSLImplementation="org.jboss.net.ssl.JBossImplementation"/> ]]>
   </programlisting>
  <para>
You now need to provide the definition for the JaasSecurityDomain in a <filename>*-service.xml</filename> or in <filename>*-jboss-beans.xml</filename> in the deploy directory. Here is a MBean example:
    </para>
  <programlisting language="XML">
      <![CDATA[
<mbean code="org.jboss.security.plugins.JaasSecurityDomain"
      name="jboss.security:service=PBESecurityDomain">
      <constructor>
         <arg type="java.lang.String" value="encrypt-keystore-password"></arg>
      </constructor>
      <attribute name="KeyStoreURL">resource:localhost.keystore</attribute>
      <attribute name="KeyStorePass">{CLASS}org.jboss.security.plugins.FilePassword:${jboss.server.home.dir}/conf/keystore.password</attribute>
      <attribute name="Salt">abcdefgh</attribute>
      <attribute name="IterationCount">13</attribute>
   </mbean>]]>
     </programlisting>
  <para>
The Salt and IterationCount are the variables that define the strength of your encrypted password, so you can vary it from what is shown. Just remember to use the changed value when generating the encrypted password.
    </para>
  <para>
      <note>
      <para>
The Salt must be eight characters long.
        </para>
    </note>
     </para>
  <para>
Your keystore is the localhost.keystore which will be in your conf directory. The keystore.password is your encrypted password that will reside in the conf directory and will be generated in the next step.
     </para>
  <para>
You now need to go to the conf directory of your JBoss AS instance (<filename>default/conf</filename>, for example).
     </para>
  <programlisting>
java -cp ../lib/jbosssx.jar org.jboss.security.plugins.FilePassword abcdefgh 13 unit-tests-server keystore.password
      </programlisting>
  <para>
Run this on a single line. In the above example, &quot;abcdefgh&quot; is the Salt and 13 is the iteration count; &apos;unit-tests-server&apos; is the password of the keystore that you are protecting; and keystore.password is the file in which the encrypted password will be stored.
      </para>
  <para>
You can then update the Tomcat service MBean to depend on your JaasSecurityDomain MBean because Tomcat has to start after <methodname>jboss.security:service=PBESecurityDomain</methodname>.
      </para>
  <para>
Navigate to <filename>$JBOSS_HOME/server/$PROFILE/deploy/jbossweb.sar/META-INF</filename>. Open <filename>jboss-service.xml</filename> and add the following &lt;depends&gt; tag towards the end.
      </para>
  <programlisting>
        <![CDATA[
      <depends>jboss.security:service=PBESecurityDomain</depends>
   </mbean>
</server>]]>
      </programlisting>
  <note>
     <para>
        In case of a native connector the <methodname>SSLPassword</methodname> attribute can also be encrypted using a JaasSecurityDomain bean. One additional step required is to create the masked password with:
     </para>
     <screen><command>java -cp jbosssx.jar org.jboss.security.plugins.PBEUtils <replaceable>SALT</replaceable> <replaceable>ITERATION-COUNT</replaceable> <replaceable>DOMAIN-PASSWORD</replaceable> <replaceable>KEYSTORE-PASSWORD</replaceable></command></screen>
     <para>
        Using the encrypted password output given by the above command the native connector can now be set up. Here is an example:
     </para>
     <programlisting language="XML">
  <![CDATA[
<!-- SSL/TLS Connector with encrypted keystore password configuration  -->
      <Connector protocol="HTTP/1.1" SSLEnabled="true"
           port="8443" address="${jboss.bind.address}"
           scheme="https" secure="true" clientAuth="false"
           SSLPassword="KAaxoMQCJH30GZWb96Mov"
           securityDomain="encrypt-keystore-password"
           SSLCertificateFile="server.crt"
           SSLCertificateKeyFile="server.pem" SSLProtocol="TLSv1" /> ]]>
   </programlisting>
  </note>
  <para>
Please see <xref linkend="Encrypting_Data_Source_Passwords"/> for related information.
        </para>
  <section>
    <title>Medium Security Usecase</title>
    <para>
A user does not want to encrypt the keystore password but wants to externalize it (outside of <filename>server.xml</filename>) or wants to make use of a predefined JaasSecurityDomain.
             </para>
    <procedure id="predefined_JaasSecurityDomain">
      <title>Predefined JaasSecurityDomain</title>
      <step>
        <title>Update <filename>jboss-service.xml</filename> to add a connector</title>
        <programlisting language="XML"><![CDATA[<mbean code="org.jboss.security.plugins.JaasSecurityDomain"
      name="jboss.security:service=SecurityDomain">
      <constructor>
         <arg type="java.lang.String" value="jbosstest-ssl"></arg>
      </constructor>
      <attribute name="KeyStoreURL">resource:localhost.keystore</attribute>
      <attribute name="KeyStorePass">unit-tests-server</attribute>
   </mbean>]]>
        </programlisting>
      </step>
      <step>
        <title>Add a &lt;depends&gt; tag to the Tomcat service</title>
        <para>Navigate to <filename>$JBOSS_HOME/server/$PROFILE/deploy/jbossweb.sar</filename>. Open <filename>server.xml</filename> and add the following <markup>&lt;depends&gt;</markup> element towards the end:
                    </para>
        <programlisting language="XML"><![CDATA[<depends>jboss.security:service=SecurityDomain</depends>
   </mbean>
</server> ]]>
        </programlisting>
      </step>
      <step>
        <title>Define the JaasSecurityDomain MBean in a <filename>-service.xml</filename> file</title>
        <para>
<filename>security-service.xml</filename> in the deploy directory, for example.
                    </para>
        <programlisting language="XML"><![CDATA[
 <mbean code="org.jboss.security.plugins.JaasSecurityDomain"
     name="jboss.security:service=SecurityDomain">
     <constructor>
        <arg type="java.lang.String" value="jbosstest-ssl"></arg>
     </constructor>
     <attribute name="KeyStoreURL">resource:localhost.keystore</attribute>
     <attribute name="KeyStorePass">unit-tests-server</attribute>
  </mbean>]]>
        </programlisting>
      </step>
    </procedure>
    <para>
                  <note>
        <title>File Permission issue reading the keystore (or FileNotFoundException)</title>
        <para>If you see this error, remember the keystore file should be writable by the user id that is running JBoss Enterprise Application Platform.
                    </para>
      </note>
                 </para>
  </section>
</chapter>
