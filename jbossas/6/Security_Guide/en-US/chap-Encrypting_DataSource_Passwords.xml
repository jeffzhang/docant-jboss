<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="Encrypting_Data_Source_Passwords">
  <title>Encrypting Data Source Passwords</title>

<!-- 
  Relevant info:
    http://community.jboss.org/wiki/ConfigJCALoginModule
    http://community.jboss.org/wiki/EncryptingDataSourcePasswords

-->

  <para>
    Database connections for the JBoss AS are defined in <filename>*-ds.xml</filename> data source files. These database connection details include clear text passwords. You can increase the security of your server by replacing clear text passwords in datasource files with encrypted passwords.
  </para>

  <para>
    This chapter presents two different methods for encrypting data source passwords. The first is <firstterm>Secured Identity</firstterm>. The second is <firstterm>Configured Identity with Password Based Encryption (PBE)</firstterm>.
  </para>

<!-- Here we need a discussion of the pros, cons, and relative merits of each of the two methods -->

  <section>
    <title>Secured Identity</title>
  
    <para>
      The class <classname>org.jboss.resource.security.SecureIdentityLoginModule</classname> can be used to both encrypt database passwords and to provide a decrypted version of the password when the data source configuration is required by the server. The <classname>SecureIdentityLoginModule</classname> uses a hard-coded password to encrypt/decrypt the data source password.
    </para>

    <procedure>
      <title>Overview: Using SecureIdentityLoginModule to encrypt a datasource password</title>
      <step>    
        <para>Encrypt the data source password.</para>
      </step>
      <step>
        <para>Create an application authentication policy with the encrypted password.</para>
      </step>
      <step>
        <para>Configure the data source to use the application authentication policy.</para>
      </step>
    </procedure>

    <section id="sect-encrypt-data-source-password">
      <title>Encrypt the data source password</title>
      <para>
        The data source password is encrypted using the <methodname>SecureIdentityLoginModule</methodname> main method by passing in the clear text password. The SecureIdentityLoginModule is provided by <filename>jbosssx.jar</filename>.
      </para> 
    
      <procedure>
        <title>Encrypt a datasource password</title>
        <para>This procedure is for JBoss Enterprise Application Platform versions 5.1 and later</para>  
        <step>
          <para>Change directory to the <filename>jboss-as</filename> directory</para>
        </step>
        <step>
           <formalpara>
            <title>Linux command</title>
            <para><screen><command>java -cp client/jboss-logging-spi.jar:lib/jbosssx.jar org.jboss.resource.security.SecureIdentityLoginModule <replaceable>PASSWORD</replaceable></command></screen></para>
          </formalpara>
          <formalpara>
            <title>Windows command:</title>
             <para><screen><command>java -cp client\jboss-logging-spi.jar;lib\jbosssx.jar org.jboss.resource.security.SecureIdentityLoginModule <replaceable>PASSWORD</replaceable></command></screen></para>
          </formalpara> 
          <formalpara>
            <title>Result:</title>
            <para>The command will return an encrypted password.</para>
          </formalpara>
        </step>
      </procedure>
    </section>
    
    <section id="sect-create-auth-policy-datasource">
      <title>Create an application authentication policy with the encrypted password</title>
      
      <para>
        Each JBoss Application Server server profile has a <filename>conf/login-config.xml</filename> file, where application authentication policies are defined for that profile. To create a an application authentication policy for your encrypted password, add a new &lt;application-policy&gt; element to the &lt;policy&gt; element.
      </para>

      <para><xref linkend="example-app-policy-encrypted-datasource"/> is a fragment of a <filename>login-config.xml</filename> file showing an application authentication policy of name "EncryptDBPassword".</para>

      <example id="example-app-policy-encrypted-datasource">
        <title>Example application authentication policy with encrypted data source password</title>
        <programlisting language="XML">
  <![CDATA[
  <policy>
  ...
      <!-- Example usage of the SecureIdentityLoginModule -->
      <application-policy name="EncryptDBPassword">
          <authentication>
              <login-module code="org.jboss.resource.security.SecureIdentityLoginModule" flag="required">
                  <module-option name="username">admin</module-option>
                  <module-option name="password">5dfc52b51bd35553df8592078de921bc</module-option>
                  <module-option name="managedConnectionFactoryName">jboss.jca:name=PostgresDS,service=LocalTxCM</module-option>
              </login-module>
          </authentication>
      </application-policy>
  </policy>]]>
            </programlisting>
      </example>
      
      <variablelist>
        <title>SecureIdentityLoginModule module options</title>
        <varlistentry>
          <term>username</term>
          <listitem>
            <para>Specify the user name to use when establishing a connection to the database.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>password</term>
          <listitem>
            <para>Provide the encrypted password generated in <xref linkend="sect-encrypt-data-source-password"/>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>managedConnectionFactoryName</term>
          <listitem>
            <variablelist>
              <varlistentry>
                <term>jboss.jca:name</term>
                <listitem>
                  <para>Nominate a Java Naming and Directory Interface (JNDI) name for this datasource.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>jboss.jca:service</term>
                <listitem>
                  <para>Specify the transaction type</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>      
      </variablelist>

      <variablelist>
        <title>Transaction types</title>
        <!-- This info from: http://community.jboss.org/wiki/ConfigJCALoginModule -->
        <!-- Also: http://community.jboss.org/wiki/DependOnDataSource -->
        <varlistentry>
          <term>NoTxCM</term>
          <listitem>
            <para>No transaction support</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>LocalTxCM</term>
          <listitem>          
            <para>Single resource transaction support</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>TxCM</term>
          <listitem>
            <para>Single resource or distributed transaction support</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>XATxCM</term>
          <listitem>          
            <para>Distributed transaction support</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>Configure the data source to use the application authentication policy</title>

      <para>
        The data source is configured in a <filename>*-ds.xml</filename> file. Remove the &lt;user-name&gt; and &lt;password&gt; elements from this file, and replace them with a &lt;security-domain&gt; element. This element will contain the application authentication policy name specified following <xref linkend="sect-create-auth-policy-datasource"/>.
      </para>

      <para>
        Using the example name from <xref linkend="sect-create-auth-policy-datasource"/>, "EncryptDBPassword", will result in a data source file that looks something like <xref linkend="example-datasource-with-auth-policy"/>.
      </para>
    
      <example id="example-datasource-with-auth-policy">
        <title>Example data source file using secured identity</title>
        <programlisting language="XML">
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<datasources>
    <local-tx-datasource>
        <jndi-name>PostgresDS</jndi-name>
        <connection-url>jdbc:postgresql://127.0.0.1:5432/test?protocolVersion=2</connection-url>
        <driver-class>org.postgresql.Driver</driver-class>
        <min-pool-size>1</min-pool-size>
        <max-pool-size>20</max-pool-size>

        <!-- REPLACED WITH security-domain BELOW
        <user-name>admin</user-name>
        <password>password</password>
        -->

        <security-domain>EncryptDBPassword</security-domain>

        <metadata>
            <type-mapping>PostgreSQL 8.0</type-mapping>
        </metadata>
    </local-tx-datasource>
</datasources>]]>
          </programlisting>
        </example>
      </section>   
    </section>

  <section>
    <title>Configured Identity with Password Based Encryption</title>

<!--A KeyStore Based Login Module for Encrypting a Data Source Password -->
    <para>
      The <classname>org.jboss.resource.security.JaasSecurityDomainIdentityLoginModule</classname> is a login module for statically defining a data source using an encrypted password.  that has been encrypted by a JaasSecurityDomain. The base64 format of the data source password may be generated using the PBEUtils command:
    </para>
    <screen><command>java -cp jbosssx.jar org.jboss.security.plugins.PBEUtils <replaceable>SALT</replaceable> <replaceable>ITERATION-COUNT</replaceable> <replaceable>DOMAIN-PASSWORD</replaceable> <replaceable>DATASOURCE-PASSWORD</replaceable></command></screen>
    <para>
      The commands for PBEUtils arguments are:
    </para>
    <variablelist>
      <varlistentry>
        <term>SALT</term>
        <listitem>
          <para>
            The Salt attribute from the JaasSecurityDomain (Must only be eight characters long).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ITERATION COUNT</term>
        <listitem>
          <para>The IterationCount attribute from the JaasSecurity domain.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>DOMAIN-PASSWORD</term>
        <listitem>
          <para>The plaintext password that maps to the KeyStorePass attribute from the JaasSecurityDomain.
              </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>DATASOURCE-PASSWORD</term>
        <listitem>
          <para>The plaintext password for the data source that should be encrypted with the JaasSecurityDomain password.
              </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para><xref linkend="exam-PBEUtils_Example_Command"/>
provides an example of the command.
        </para>
    <example id="exam-PBEUtils_Example_Command">
      <title>PBEUtils command example</title>
      <screen>
 java -cp jbosssx.jar org.jboss.security.plugins.PBEUtils abcdefgh 13 master &apos;&apos;
 Encoded password: E5gtGMKcXPP
        </screen>
    </example>
    <para>
Add the following application policy to the <filename>$JBOSS_HOME/server/$PROFILE/conf/login-config.xml</filename>
        file.</para>
    <programlisting language="XML">
        <![CDATA[
<application-policy name = "EncryptedHsqlDbRealm">
   <authentication>
      <login-module code = "org.jboss.resource.security.JaasSecurityDomainIdentityLoginModule"
       flag = "required">
          <module-option name = "username">sa</module-option>
          <module-option name = "password">E5gtGMKcXPP</module-option>
          <module-option name = "managedConnectionFactoryName">jboss.jca:service=LocalTxCM,name=DefaultDS</module-option>
          <module-option name = "jaasSecurityDomain">jboss.security:service=JaasSecurityDomain,domain=ServerMasterPassword</module-option>
       </login-module>
    </authentication>
 </application-policy>]]>
        </programlisting>
    <para>
The <filename>$JBOSS_HOME/server/$PROFILE/docs/examples/jca/hsqldb-encrypted-ds.xml</filename> illustrates that data source configuration along with the JaasSecurityDomain configuration for the keystore:
        </para>
    <programlisting language="XML"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<!-- The Hypersonic embedded database JCA connection factory config
that illustrates the use of the JaasSecurityDomainIdentityLoginModule
to use encrypted password in the data source configuration. 

$Id: hsqldb-encrypted-ds.xml,v 1.1.2.1 2004/06/04 02:20:52 starksm Exp $ -->


<datasources>
   <local-tx-datasource>

      <!-- The jndi name of the DataSource, it is prefixed with java:/ -->
      <!-- Datasources are not available outside the virtual machine -->
      <jndi-name>DefaultDS</jndi-name>

      <!-- for tcp connection, allowing other processes to use the hsqldb
      database. This requires the org.jboss.jdbc.HypersonicDatabase mbean.
      <connection-url>jdbc:hsqldb:hsql://localhost:1701</connection-url>
      -->
      <!-- for totally in-memory db, not saved when jboss stops. 
      The org.jboss.jdbc.HypersonicDatabase mbean necessary
      <connection-url>jdbc:hsqldb:.</connection-url>
      -->
      <!-- for in-process persistent db, saved when jboss stops. The
      org.jboss.jdbc.HypersonicDatabase mbean is necessary for properly db shutdown
      -->
      <connection-url>jdbc:hsqldb:${jboss.server.data.dir}${/}hypersonic${/}localDB</connection-url>

      <!-- The driver class -->
      <driver-class>org.hsqldb.jdbcDriver</driver-class>

      <!--example of how to specify class that determines if exception means connection should be destroyed-->
      <!--exception-sorter-class-name>org.jboss.resource.adapter.jdbc.vendor.DummyExceptionSorter</exception-sorter-class-name-->

      <!-- this will be run before a managed connection is removed from the pool for use by a client-->
      <!--<check-valid-connection-sql>select * from something</check-valid-connection-sql> -->

      <!-- The minimum connections in a pool/sub-pool. Pools are lazily constructed on first use -->
      <min-pool-size>5</min-pool-size>

      <!-- The maximum connections in a pool/sub-pool -->
      <max-pool-size>20</max-pool-size>

      <!-- The time before an unused connection is destroyed -->
      <!-- NOTE: This is the check period. It will be destroyed somewhere between 1x and 2x this timeout after last use -->
      <!-- TEMPORARY FIX! - Disable idle connection removal, HSQLDB has a problem with not reaping threads on closed connections -->
      <idle-timeout-minutes>0</idle-timeout-minutes>

      <!-- sql to call when connection is created
        <new-connection-sql>some arbitrary sql</new-connection-sql>
      -->

      <!-- sql to call on an existing pooled connection when it is obtained from pool 
         <check-valid-connection-sql>some arbitrary sql</check-valid-connection-sql>
      -->

      <!-- example of how to specify a class that determines a connection is valid before it is handed out from the pool
         <valid-connection-checker-class-name>org.jboss.resource.adapter.jdbc.vendor.DummyValidConnectionChecker</valid-connection-checker-class-name>
      -->

      <!-- Whether to check all statements are closed when the connection is returned to the pool,
           this is a debugging feature that should be turned off in production -->
      <track-statements></track-statements>

      <!-- Use the getConnection(user, pw) for logins
        <application-managed-security></application-managed-security>
      -->

      <!-- Use the security domain defined in conf/login-config.xml -->
      <security-domain>EncryptedHsqlDbRealm</security-domain>

      <!-- This mbean can be used when using in process persistent hypersonic -->
      <depends>jboss:service=Hypersonic,database=localDB</depends>

      <!-- The datasource must depend on the mbean -->
      <depends>jboss.security:service=JaasSecurityDomain,domain=ServerMasterPassword</depends>
   </local-tx-datasource>

   <!-- The JaasSecurityDomain used for encryption. Use the name
   "jboss.security:service=JaasSecurityDomain,domain=ServerMasterPassword"
   as the value of the JaasSecurityDomainIdentityLoginModule
   jaasSecurityDomain login module option in the EncryptedHsqlDbRealm
   login-config.xml section. Typically this service config should be in
   the conf/jboss-service.xml descriptor.
   The opaque master.password file could be created using: 
   java -cp jbosssx.jar org.jboss.security.plugins.FilePassword 12345678 17 master server.password

   The corresponding login-config.xml would look like:
    <application-policy name = "EncryptedHsqlDbRealm">
       <authentication>
          <login-module code = "org.jboss.resource.security.JaasSecurityDomainIdentityLoginModule"
          flag = "required">
             <module-option name = "username">sa</module-option>
             <module-option name = "password">E5gtGMKcXPP</module-option>
             <module-option name = "managedConnectionFactoryName">jboss.jca:service=LocalTxCM,name=DefaultDS</module-option>
             <module-option name = "jaasSecurityDomain">jboss.security:service=JaasSecurityDomain,domain=ServerMasterPassword</module-option>
          </login-module>
       </authentication>
    </application-policy>
    where the encrypted password was generated using:
     java -cp jbosssx.jar org.jboss.security.plugins.PBEUtils abcdefgh 13 master ''
     Encoded password: E5gtGMKcXPP
   -->
   <mbean code="org.jboss.security.plugins.JaasSecurityDomain"
      name="jboss.security:service=JaasSecurityDomain,domain=ServerMasterPassword">
      <constructor>
         <arg type="java.lang.String" value="ServerMasterPassword"></arg>
      </constructor>
      <!-- The opaque master password file used to decrypt the encrypted
      database password key -->
      <attribute name="KeyStorePass">{CLASS}org.jboss.security.plugins.FilePassword:${jboss.server.home.dir}/conf/server.password</attribute>
      <attribute name="Salt">abcdefgh</attribute>
      <attribute name="IterationCount">13</attribute>
   </mbean>

   <!-- This mbean can be used when using in process persistent db -->
   <mbean code="org.jboss.jdbc.HypersonicDatabase"
      name="jboss:service=Hypersonic,database=localDB">
      <attribute name="Database">localDB</attribute>
      <attribute name="InProcessMode">true</attribute>
   </mbean>
</datasources>]]>
          </programlisting>

            <warning>
        <para>
Remember to use the same Salt and IterationCount in the MBean that was used during the password generation step.
              </para>
      </warning>

            <note>
        <para>
You may see the following error while starting a service that depends on the encrypted data source:
              </para>
        <programlisting>
Caused by: java.security.InvalidAlgorithmParameterException: Parameters missing
        at com.sun.crypto.provider.SunJCE_af.a(DashoA12275)
        at com.sun.crypto.provider.PBEWithMD5AndDESCipher.engineInit(DashoA12275)
        at javax.crypto.Cipher.a(DashoA12275)
        at javax.crypto.Cipher.a(DashoA12275)
        at javax.crypto.Cipher.init(DashoA12275)
        at javax.crypto.Cipher.init(DashoA12275)
        at org.jboss.security.plugins.JaasSecurityDomain.decode(JaasSecurityDomain.java:325)
        at org.jboss.security.plugins.JaasSecurityDomain.decode64(JaasSecurityDomain.java:351)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155)
        ... 139 more
              </programlisting>
        <para>
The error most likely means that the following MBean is not yet started as a service:
              </para>
        <programlisting>
(jboss.security:service=JaasSecurityDomain,domain=ServerMasterPassword)
              </programlisting>
        <para>
          The following element should be included so that the MBean starts before the data source, as per the example <filename>hsqldb-encrypted-ds.xml</filename> code shown previously.
        </para>
        <programlisting>
&lt;depends&gt;jboss.security:service=JaasSecurityDomain,domain=ServerMasterPassword&lt;/depends&gt;
              </programlisting>
      </note>

  </section>
</chapter>
