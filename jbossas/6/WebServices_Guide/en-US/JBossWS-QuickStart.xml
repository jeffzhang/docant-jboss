<?xml version="1.0" encoding="UTF-8"?><chapter id="chap_JBossWS-QuickStart"><title>JBossWS-QuickStart</title><para/><para> </para><section id="JBossWS-QuickStart_Right_on"><title>Right on'</title><para>JBossWS uses the JBoss application server as its target container. The following examples focus on web service deployments that leverage EJB3 service implementations and the JAX-WS programming models. For further information on POJO service implementations and advanced topics you need consult the user guide.</para><para>In the following sections we will explore the samples that ship with the JBossWS distribution. They provide a build structure based on Ant to get you started quickly.</para></section>
<section id="JBossWS-QuickStart_Developing_web_service_implementations"><title>Developing web service implementations</title><para>JAX-WS does leverage <ulink url="http://java.sun.com/j2se/1.5.0/docs/guide/language/annotations.html">JDK 5 annotations</ulink> in order to express web service meta data on Java components and to describe the mapping between Java data types and XML. When developing web service implementations you need to decide whether you are going start with an abstract contract (<ulink url="http://www.w3.org/TR/wsdl">WSDL</ulink>) or a Java component.</para><para>If you are in charge to provide the service implementation, then you are probably going to start with the implementation and derive the abstract contract from it. You are probably not even getting in touch with the WSDL unless you hand it to 3rd party clients. For this reason we are going to look at a service implementation that leverages <ulink url="http://jcp.org/en/jsr/detail?id=181">JSR-181 annotations</ulink>.</para><note><para><para><emphasis role="bold">Note</emphasis></para><para>Even though detailed knowledge of web service meta data is not required,  it will definitely help if you make yourself familiar with it.  For further information see</para><itemizedlist><listitem><para> <ulink url="http://jcp.org/en/jsr/detail?id=181">Web service meta data (JSR-181)</ulink> </para></listitem><listitem><para> <ulink url="http://java.sun.com/webservices/jaxb/">Java API for XML binding (JAXB)</ulink></para></listitem></itemizedlist></para></note><para>When starting from Java you must provide the service implementation. A valid endpoint implementation class must meet the following requirements:</para><itemizedlist><listitem><para> It <emphasis>must</emphasis> carry a <computeroutput>javax.jws.WebService</computeroutput> annotation (see JSR 181) </para></listitem><listitem><para> All method parameters and return types <emphasis>must</emphasis> be compatible with the JAXB 2.0 </para></listitem></itemizedlist><para>Let's look at a sample EJB3 component that is going to be exposed as a web service.  (This is based on the Retail example).</para><para>Don't be confused with the EJB3 annotation <computeroutput>@Stateless</computeroutput>. We concentrate on the <computeroutput>@WebService</computeroutput> annotation for now.</para><para><emphasis role="bold">The service implementation class</emphasis></para><screen xml:space="preserve"><emphasis role="bold">package</emphasis> org.jboss.test.ws.jaxws.samples.retail.profile;
 
<emphasis role="bold">import</emphasis> javax.ejb.Stateless;
<emphasis role="bold">import</emphasis> javax.jws.WebService;
<emphasis role="bold">import</emphasis> javax.jws.WebMethod;
<emphasis role="bold">import</emphasis> javax.jws.soap.SOAPBinding;
 
@Stateless                                                             (1)
@WebService(                                                           (2)
   name="ProfileMgmt",
   targetNamespace = "http://org.jboss.ws/samples/retail/profile",
   serviceName = "ProfileMgmtService")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)         (3)
<emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> ProfileMgmtBean {
 
   @WebMethod                                                          (4)
   <emphasis role="bold">public</emphasis> DiscountResponse getCustomerDiscount(DiscountRequest request) {
      <emphasis role="bold">return</emphasis> <emphasis role="bold">new</emphasis> DiscountResponse(request.getCustomer(), 10.00);
   }
}
 
</screen><orderedlist><listitem><para> We are using a stateless session bean implementation </para></listitem><listitem><para> Exposed a web service with an explicit namespace </para></listitem><listitem><para> It's a doc/lit bare endpoint </para></listitem><listitem><para> And offers an 'getCustomerDiscount' operation </para></listitem></orderedlist><para> <emphasis role="bold"> What about the payload? </emphasis></para><para>The method parameters and return values are going to represent our XML payload and thus require being compatible with <ulink url="http://java.sun.com/webservices/jaxb/">JAXB2</ulink>. Actually you wouldn't need any JAXB annotations for this particular example, because JAXB relies on meaningful defaults. For the sake of documentation we put the more important ones here.</para><para>Take a look at the request parameter:</para><screen xml:space="preserve"><emphasis role="bold">package</emphasis> org.jboss.test.ws.jaxws.samples.retail.profile;
 
<emphasis role="bold">import</emphasis> javax.xml.bind.annotation.XmlAccessType;
<emphasis role="bold">import</emphasis> javax.xml.bind.annotation.XmlAccessorType;
<emphasis role="bold">import</emphasis> javax.xml.bind.annotation.XmlType;
 
<emphasis role="bold">import</emphasis> org.jboss.test.ws.jaxws.samples.retail.Customer;
 
@XmlAccessorType(XmlAccessType.FIELD)            
@XmlType(                                                  (1)
  name = "discountRequest", 
  namespace="http://org.jboss.ws/samples/retail/profile", 
  propOrder = { "customer" }
)
<emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> DiscountRequest {
 
   <emphasis role="bold">protected</emphasis> Customer customer;
 
   <emphasis role="bold">public</emphasis> DiscountRequest() {
   }
 
   <emphasis role="bold">public</emphasis> DiscountRequest(Customer customer) {
      this.customer = customer;
   }
 
   <emphasis role="bold">public</emphasis> Customer getCustomer() {
      <emphasis role="bold">return</emphasis> customer;
   }
 
   <emphasis role="bold">public</emphasis> <emphasis role="bold">void</emphasis> setCustomer(Customer value) {
      this.customer = value;
   }
 
}
 
</screen><orderedlist><listitem><para>In this case we use <computeroutput>@XmlType</computeroutput> to specify an XML complex type name and override the namespace. </para></listitem></orderedlist><para> </para><variablelist/><section id="JBossWS-QuickStart_Deploying_service_implementations"><title>Deploying service implementations</title><para>Service deployment basically depends on the implementation type. As you may already know web services can be implemented as EJB3 components or plain old Java objects. This quick start leverages EJB3 components in all examples, thats why we are going to look at this case in the next sections.</para><para> </para><para><emphasis role="bold"> EJB3 services </emphasis></para><para>Simply wrap up the service implementation class, the endpoint interface and any custom data types in a JAR and drop them in the <computeroutput>deploy</computeroutput> directory. No additional deployment descriptors required. Any meta data required for the deployment of the actual web service is taken from the annotations provided on the implementation class and the service endpoint interface. JBossWS will intercept that EJB3 deployment (the bean will also be there) and create an HTTP endpoint at deploy-time:</para><para> </para><para><emphasis role="bold">The JAR package structure</emphasis></para><screen xml:space="preserve">jar -tf jaxws-samples-retail.jar

org/jboss/test/ws/jaxws/samples/retail/profile/DiscountRequest.class
org/jboss/test/ws/jaxws/samples/retail/profile/DiscountResponse.class
org/jboss/test/ws/jaxws/samples/retail/profile/ObjectFactory.class
org/jboss/test/ws/jaxws/samples/retail/profile/ProfileMgmt.class
org/jboss/test/ws/jaxws/samples/retail/profile/ProfileMgmtBean.class
org/jboss/test/ws/jaxws/samples/retail/profile/ProfileMgmtService.class
org/jboss/test/ws/jaxws/samples/retail/profile/package-info.class
</screen><note><para><para><emphasis><emphasis role="bold">Note</emphasis></emphasis></para><para><emphasis>If the deployment was successful you should be able to see your endpoint at <ulink url="http://localhost:8080/jbossws/services">http://localhost:8080/jbossws/services</ulink></emphasis></para><para> </para></para></note></section>
</section>
<section id="JBossWS-QuickStart_Consuming_web_services"><title>Consuming web services</title><para>When creating web service clients you would usually start from the WSDL. JBossWS ships with a set of tools to generate the required JAX-WS artefacts to build client implementations. In the following section we will look at the most basic usage patterns. For a more detailed introductoin to web service client please consult the <ulink url="http://community.jboss.org/docs/DOC-13972">user guide</ulink>.</para><para> </para><para> </para><para><emphasis role="bold">Using wsconsume </emphasis></para><para> </para><para>The <link linkend="chap_JBossWS-wsconsume">wsconsume tool</link> is used to consume the abstract contract (WSDL) and produce annotated Java classes (and optionally sources) that define it. We are going to start with the WSDL from our retail example (<link linkend="JBossWS-QuickStart_Profile_MgmtService">ProfileMgmtService.wsdl</link>). For a detailed tool reference you need to consult the user guide.</para><screen xml:space="preserve">wsconsume is a command line tool that generates 
portable JAX-WS artifacts from a WSDL file.

usage: org.jboss.ws.tools.jaxws.command.wsconsume [options] &lt;wsdl-url&gt;

options:
    -h, --help                  Show this help message
    -b, --binding=&lt;file&gt;        One or more JAX-WS or JAXB binding files
    -k, --keep                  Keep/Generate Java source
    -c  --catalog=&lt;file&gt;        Oasis XML Catalog file for entity resolution
    -p  --package=&lt;name&gt;        The target package for generated source
    -w  --wsdlLocation=&lt;loc&gt;    Value to use for @WebService.wsdlLocation
    -o, --output=&lt;directory&gt;    The directory to put generated artifacts
    -s, --source=&lt;directory&gt;    The directory to put Java source
    -q, --quiet                 Be somewhat more quiet
    -t, --show-traces           Show full exception stack traces
</screen><para>Let's try it on our retail sample:</para><screen xml:space="preserve">~./wsconsume.sh -k 
-p org.jboss.test.ws.jaxws.samples.retail.profile ProfileMgmtService.wsdl  (1)

org/jboss/test/ws/jaxws/samples/retail/profile/Customer.java
org/jboss/test/ws/jaxws/samples/retail/profile/DiscountRequest.java
org/jboss/test/ws/jaxws/samples/retail/profile/DiscountResponse.java
org/jboss/test/ws/jaxws/samples/retail/profile/ObjectFactory.java
org/jboss/test/ws/jaxws/samples/retail/profile/ProfileMgmt.java
org/jboss/test/ws/jaxws/samples/retail/profile/ProfileMgmtService.java
org/jboss/test/ws/jaxws/samples/retail/profile/package-info.java

</screen><orderedlist><listitem><para> As you can see we did use the <computeroutput>-p</computeroutput> switch to specify the package name of the generated sources. </para></listitem></orderedlist><para> </para><para><emphasis role="bold"> The generated artifacts explained </emphasis></para><informaltable><tgroup cols="2"><colspec colnum="1" colname="col1"/><colspec colnum="2" colname="col2"/><thead><row><entry> File </entry><entry> Purpose </entry></row></thead><tbody><row><entry>ProfileMgmt.java</entry><entry>Service Endpoint Interface</entry></row><row><entry>Customer.java</entry><entry>Custom data type</entry></row><row><entry>Discount*.java</entry><entry>Custom data type</entry></row><row><entry>ObjectFactory.java</entry><entry>JAXB XML Registry</entry></row><row><entry>package-info.java</entry><entry>Holder for JAXB package annotations</entry></row><row><entry>ProfileMgmtService.java</entry><entry>Service factory</entry></row></tbody></tgroup></informaltable><para>Basically <computeroutput>wsconsume</computeroutput> generates all custom data types (JAXB annotated classes), the service endpoint interface and a service factory class. We will look at how these artifacts can be used the build web service client implementations in the next section.</para><para> </para><bridgehead id="Constructing_a_service_stub">Constructing a service stub</bridgehead><para>Web service clients make use of a service stubs that hide the details of a remote web service invocation. To a client application a WS invocation just looks like an invocation of any other business component. In this case the service endpoint interface acts as the business interface. JAX-WS does use a service factory class to construct this as particular service stub:</para><screen xml:space="preserve"><emphasis role="bold">import</emphasis> javax.xml.ws.Service;
 
Service service = Service.create(                                 (1)
  <emphasis role="bold">new</emphasis> URL("http://example.org/service?wsdl"), 
  <emphasis role="bold">new</emphasis> QName("MyService")
);      
ProfileMgmt profileMgmt = service.getPort(ProfileMgmt.class);     (2)
 
// do something with the service stub here...                     (3)
</screen><orderedlist><listitem><para> Create a service factory using the WSDL location and the service name </para></listitem><listitem><para> Use the tool created service endpoint interface to build the service stub </para></listitem><listitem><para> Use the stub like any other business interface </para></listitem></orderedlist><para> </para><para> </para><para><emphasis><emphasis role="bold">Note</emphasis></emphasis></para><note><para><para><emphasis>The creation of the service stub is quite costly. You should take care that it gets  reused by your application code (However <emphasis role="bold">it's not thread safe</emphasis>). Within a EE5 environment you might want to investigate  the <computeroutput>@WebServiceRef</computeroutput> functionality.</emphasis></para><para> </para></para></note></section>
<section id="JBossWS-QuickStart_Appendix"><title>Appendix</title><section id="JBossWS-QuickStart_Profile_MgmtService"><title>ProfileMgmtService.wsdl</title><screen xml:space="preserve">&lt;definitions
    name='ProfileMgmtService'
    targetNamespace='<ulink url="http://org.jboss.ws/samples/retail/profile">http://org.jboss.ws/samples/retail/profile</ulink>'
    xmlns='<ulink url="http://schemas.xmlsoap.org/wsdl/">http://schemas.xmlsoap.org/wsdl/</ulink>'
    xmlns:ns1='<ulink url="http://org.jboss.ws/samples/retail">http://org.jboss.ws/samples/retail</ulink>'
    xmlns:soap='<ulink url="http://schemas.xmlsoap.org/wsdl/soap/">http://schemas.xmlsoap.org/wsdl/soap/</ulink>'
    xmlns:tns='<ulink url="http://org.jboss.ws/samples/retail/profile">http://org.jboss.ws/samples/retail/profile</ulink>'
    xmlns:xsd='<ulink url="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</ulink>'&gt;

   &lt;types&gt;

      &lt;xs:schema targetNamespace='<ulink url="http://org.jboss.ws/samples/retail">http://org.jboss.ws/samples/retail</ulink>'
                 version='1.0' xmlns:xs='<ulink url="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</ulink>'&gt;
         &lt;xs:complexType name='customer'&gt;
            &lt;xs:sequence&gt;
               &lt;xs:element minOccurs='0' name='creditCardDetails' type='xs:string'/&gt;
               &lt;xs:element minOccurs='0' name='firstName' type='xs:string'/&gt;
               &lt;xs:element minOccurs='0' name='lastName' type='xs:string'/&gt;
            &lt;/xs:sequence&gt;
         &lt;/xs:complexType&gt;
      &lt;/xs:schema&gt;

      &lt;xs:schema
          targetNamespace='<ulink url="http://org.jboss.ws/samples/retail/profile">http://org.jboss.ws/samples/retail/profile</ulink>'
          version='1.0'
          xmlns:ns1='<ulink url="http://org.jboss.ws/samples/retail">http://org.jboss.ws/samples/retail</ulink>'
          xmlns:tns='<ulink url="http://org.jboss.ws/samples/retail/profile">http://org.jboss.ws/samples/retail/profile</ulink>'
          xmlns:xs='<ulink url="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</ulink>'&gt;
         
         &lt;xs:import namespace='<ulink url="http://org.jboss.ws/samples/retail'/">http://org.jboss.ws/samples/retail'/</ulink>&gt;
         &lt;xs:element name='getCustomerDiscount' 
                     nillable='true' type='tns:discountRequest'/&gt;
         &lt;xs:element name='getCustomerDiscountResponse' 
                     nillable='true' type='tns:discountResponse'/&gt;
         &lt;xs:complexType name='discountRequest'&gt;
            &lt;xs:sequence&gt;
               &lt;xs:element minOccurs='0' name='customer' type='ns1:customer'/&gt;

            &lt;/xs:sequence&gt;
         &lt;/xs:complexType&gt;
         &lt;xs:complexType name='discountResponse'&gt;
            &lt;xs:sequence&gt;
               &lt;xs:element minOccurs='0' name='customer' type='ns1:customer'/&gt;
               &lt;xs:element name='discount' type='xs:double'/&gt;
            &lt;/xs:sequence&gt;
         &lt;/xs:complexType&gt;
      &lt;/xs:schema&gt;

   &lt;/types&gt;

   &lt;message name='ProfileMgmt_getCustomerDiscount'&gt;
      &lt;part element='tns:getCustomerDiscount' name='getCustomerDiscount'/&gt;
   &lt;/message&gt;
   &lt;message name='ProfileMgmt_getCustomerDiscountResponse'&gt;
      &lt;part element='tns:getCustomerDiscountResponse' 
            name='getCustomerDiscountResponse'/&gt;
   &lt;/message&gt;
   &lt;portType name='ProfileMgmt'&gt;
      &lt;operation name='getCustomerDiscount' 
                 parameterOrder='getCustomerDiscount'&gt;

         &lt;input message='tns:ProfileMgmt_getCustomerDiscount'/&gt;
         &lt;output message='tns:ProfileMgmt_getCustomerDiscountResponse'/&gt;
      &lt;/operation&gt;
   &lt;/portType&gt;
   &lt;binding name='ProfileMgmtBinding' type='tns:ProfileMgmt'&gt;
      &lt;soap:binding style='document' 
                    transport='<ulink url="http://schemas.xmlsoap.org/soap/http'/">http://schemas.xmlsoap.org/soap/http'/</ulink>&gt;
      &lt;operation name='getCustomerDiscount'&gt;
         &lt;soap:operation soapAction=''/&gt;
         &lt;input&gt;

            &lt;soap:body use='literal'/&gt;
         &lt;/input&gt;
         &lt;output&gt;
            &lt;soap:body use='literal'/&gt;
         &lt;/output&gt;
      &lt;/operation&gt;
   &lt;/binding&gt;
   &lt;service name='ProfileMgmtService'&gt;
      &lt;port binding='tns:ProfileMgmtBinding' name='ProfileMgmtPort'&gt;

         &lt;soap:address 
             location='<ulink url="http://">http://</ulink>&lt;HOST&gt;:&lt;PORT&gt;/jaxws-samples-retail/ProfileMgmtBean'/&gt;
      &lt;/port&gt;
   &lt;/service&gt;
&lt;/definitions&gt;</screen><para> </para> </section>
</section></chapter>