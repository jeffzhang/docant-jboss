<?xml version="1.0" encoding="UTF-8"?><chapter id="chap_JBossWS-Authentication"><title>JBossWS-Authentication</title><para>This page explains the simplest way to authenticate a web service user with JBossWS.</para><para>First we secure the access to the SLSB as we would do for normal (non web service) invocations: this can be easily done through the @RolesAllowed, @PermitAll, @DenyAll annotation. The allowed user roles can be set with these annotations both on the bean class and on any of its business methods.</para><screen xml:space="preserve">@Stateless
@RolesAllowed("friend")
<emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> EndpointEJB <emphasis role="bold">implements</emphasis> EndpointInterface
{
  ...
}
</screen><para>Similarly POJO endpoints are secured the same way as we do for normal web applications in web.xml:</para><screen xml:space="preserve">  &lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
      &lt;web-resource-name&gt;All resources&lt;/web-resource-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
      &lt;role-name&gt;friend&lt;/role-name&gt;
    &lt;/auth-constraint&gt;
  &lt;/security-constraint&gt;

  &lt;security-role&gt;
    &lt;role-name&gt;friend&lt;/role-name&gt;
  &lt;/security-role&gt;</screen><section><title>Define the security domain</title><para>Next, define the security domain for this deployment. This is performed using the <ulink url="http://community.jboss.org/docs/DOC-13972#SecurityDomain">@SecurityDomain</ulink> annotation for EJB3 endpoints</para><screen xml:space="preserve">@Stateless
@SecurityDomain("JBossWS")
@RolesAllowed("friend")
<emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> EndpointEJB <emphasis role="bold">implements</emphasis> EndpointInterface
{
  ...
}
</screen><para>or modifying the jboss-web.xml for POJO endpoints</para><screen xml:space="preserve">&lt;jboss-web&gt;
  &lt;security-domain&gt;java:/jaas/JBossWS&lt;/security-domain&gt;
&lt;/jboss-web&gt;
</screen><para>The JBossWS security context is configured in login-config.xml and uses the <ulink url="http://wiki.jboss.org/wiki/Wiki.jsp?page=UsersRolesLoginModule">UsersRolesLoginModule</ulink>. As a matter of fact login-config.xml, that lives in the server config dir, contains this security domain definition:</para><screen xml:space="preserve">  &lt;!-- 
    A template configuration for the JBossWS security domain.
    This defaults to the UsersRolesLoginModule the same as other and should be
    changed to a stronger authentication mechanism as required.
  --&gt;
  &lt;application-policy name="JBossWS"&gt;
    &lt;authentication&gt;
      &lt;login-module code="org.jboss.security.auth.spi.UsersRolesLoginModule"
        flag="required"&gt;
        &lt;module-option name="usersProperties"&gt;props/jbossws-users.properties&lt;/module-option&gt;
        &lt;module-option name="rolesProperties"&gt;props/jbossws-roles.properties&lt;/module-option&gt;
        &lt;module-option name="unauthenticatedIdentity"&gt;anonymous&lt;/module-option&gt;
      &lt;/login-module&gt;
    &lt;/authentication&gt;
  &lt;/application-policy&gt;
</screen><para>Of course you can define and use your own security domain as well as your login module (in order to check for users' identity querying a database for example).</para></section>
<section><title>Use BindingProvider to set principal/credential</title><para>A web service client may use the javax.xml.ws.BindingProvider interface to set the username/password combination</para><screen xml:space="preserve">URL wsdlURL = <emphasis role="bold">new</emphasis> File("resources/jaxws/samples/context/WEB-INF/wsdl/TestEndpoint.wsdl").toURL();
QName qname = <emphasis role="bold">new</emphasis> QName("http://org.jboss.ws/jaxws/context", "TestEndpointService");
Service service = Service.create(wsdlURL, qname);
port = (TestEndpoint)service.getPort(TestEndpoint.class);
 
BindingProvider bp = (BindingProvider)port;
bp.getRequestContext().put(BindingProvider.USERNAME_PROPERTY, "kermit");
bp.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, "thefrog");
</screen></section>
<section><title>Using HTTP Basic Auth for security</title><para>To enable HTTP Basic authentication you use the <ulink url="http://community.jboss.org/docs/DOC-13972#WebContext">@WebContext</ulink> annotation on the bean class</para><screen xml:space="preserve">@Stateless
@SecurityDomain("JBossWS")
@RolesAllowed("friend")
@WebContext(contextRoot="/my-cxt", urlPattern="/*", authMethod="BASIC", transportGuarantee="NONE", secureWSDLAccess=<emphasis role="bold">false</emphasis>)
<emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> EndpointEJB <emphasis role="bold">implements</emphasis> EndpointInterface
{
  ...
}
</screen><para>For POJO endpoints, we modify the web.xml adding the auth-method element:</para><screen xml:space="preserve">  &lt;login-config&gt;
    &lt;auth-method&gt;BASIC&lt;/auth-method&gt;
    &lt;realm-name&gt;Test Realm&lt;/realm-name&gt;
  &lt;/login-config&gt;
</screen></section>
</chapter>