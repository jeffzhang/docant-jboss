<?xml version="1.0" encoding="UTF-8"?><chapter id="chap_JBossWS-CXFWS-ReliableMessagingtutorial"><title>JBossWS-CXFWS-ReliableMessagingtutorial</title><para><ulink url="http://incubator.apache.org/cxf/">Apache CXF</ulink> comes with support for <ulink url="http://specs.xmlsoap.org/ws/2005/02/rm/ws-reliablemessaging.pdf">WS-RM 1.0</ulink>. In this sample we will show how to create client and endpoint communicating each other using WS-RM 1.0. The sample uses <ulink url="http://www.w3.org/2006/07/ws-policy/">WS-Policy</ulink> specification to configure WS-RM.</para><para>Creating the WS-RM based service and client is very simple. User needs to create regular JAX-WS service and client first. The last step is to configure WSRM.</para><para/><section id="JBossWS-CXFWS-ReliableMessagingtutorial_The_service"><title>The service</title><para>We will start with the following endpoint implementation (bottom-up approach):</para><screen xml:space="preserve"><emphasis role="bold">package</emphasis> org.jboss.test.ws.jaxws.samples.wsrm.service;
 
<emphasis role="bold">import</emphasis> javax.jws.Oneway;
<emphasis role="bold">import</emphasis> javax.jws.WebMethod;
<emphasis role="bold">import</emphasis> javax.jws.WebService;
 
@WebService
(
   name = "SimpleService",
   serviceName = "SimpleService",
   targetNamespace = "http://www.jboss.org/jbossws/ws-extensions/wsrm"
)
<emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> SimpleServiceImpl
{
   @Oneway
   @WebMethod
   <emphasis role="bold">public</emphasis> <emphasis role="bold">void</emphasis> ping()
   {
      System.out.println("ping()");
   }
 
   @WebMethod
   <emphasis role="bold">public</emphasis> String echo(String s)
   {
      System.out.println("echo(" + s + ")");
      <emphasis role="bold">return</emphasis> s;
   }
}
</screen><para>Let's say that compiled endpoint class is in directory <emphasis role="bold">/home/username/wsrm/cxf/classes</emphasis>. Our next step is to generate JAX-WS artifacts and WSDL.</para><para> </para></section>
<section id="JBossWS-CXFWS-ReliableMessagingtutorial_Generating_WSDL_and_JAXWS_Endpoint_Artifacts"><title>Generating WSDL and JAX-WS Endpoint Artifacts</title><para>We will use <emphasis role="bold">wsprovide</emphasis> commandline tool to generate WSDL and JAX-WS artifacts. Here's the command:</para><screen xml:space="preserve">cd $JBOSS_HOME/bin

./wsprovide.sh --keep --wsdl \
   --classpath=/home/username/wsrm/cxf/classes \
   --output=/home/username/wsrm/cxf/wsprovide/generated/classes \
   --resource=/home/username/wsrm/cxf/wsprovide/generated/wsdl \
   --source=/home/username/wsrm/cxf/wsprovide/generated/src \
   org.jboss.test.ws.jaxws.samples.wsrm.service.SimpleServiceImpl
</screen><para>The above command generates the following artifacts:</para><screen xml:space="preserve"># compiled classes
ls /home/username/wsrm/cxf/wsprovide/generated/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/
Echo.class  EchoResponse.class  Ping.class

# java sources
ls /home/username/wsrm/cxf/wsprovide/generated/src/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/
Echo.java  EchoResponse.java  Ping.java

# contract artifacts
ls /home/username/wsrm/cxf/wsprovide/generated/wsdl/
SimpleService.wsdl
</screen><para>All aforementioned generated artifacts will be part of endpoint archive. But before we will create the endpoint archive we need to reference generated WSDL from endpoint. To achieve that we will use <emphasis role="bold">wsdlLocation</emphasis> annotation attribute. Here's the updated endpoint implementation before packaging it to the war file:</para><screen xml:space="preserve"><emphasis role="bold">package</emphasis> org.jboss.test.ws.jaxws.samples.wsrm.service;
 
<emphasis role="bold">import</emphasis> javax.jws.Oneway;
<emphasis role="bold">import</emphasis> javax.jws.WebMethod;
<emphasis role="bold">import</emphasis> javax.jws.WebService;
 
@WebService
(
   name = "SimpleService",
   serviceName = "SimpleService",
   wsdlLocation = "WEB-INF/wsdl/SimpleService.wsdl",
   targetNamespace = "http://www.jboss.org/jbossws/ws-extensions/wsrm"
)
<emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> SimpleServiceImpl
{
   @Oneway
   @WebMethod
   <emphasis role="bold">public</emphasis> <emphasis role="bold">void</emphasis> ping()
   {
      System.out.println("ping()");
   }
 
   @WebMethod
   <emphasis role="bold">public</emphasis> String echo(String s)
   {
      System.out.println("echo(" + s + ")");
      <emphasis role="bold">return</emphasis> s;
   }
}
</screen><para>Created endpoint war archive consists of the following entries:</para><screen xml:space="preserve">jar -tvf jaxws-samples-wsrm.war 
     0 Wed Apr 16 14:39:22 CEST 2008 META-INF/
   106 Wed Apr 16 14:39:20 CEST 2008 META-INF/MANIFEST.MF
     0 Wed Apr 16 14:39:22 CEST 2008 WEB-INF/
   591 Wed Apr 16 14:39:20 CEST 2008 WEB-INF/web.xml
     0 Wed Apr 16 14:39:22 CEST 2008 WEB-INF/classes/
     0 Wed Apr 16 14:39:18 CEST 2008 WEB-INF/classes/org/
     0 Wed Apr 16 14:39:18 CEST 2008 WEB-INF/classes/org/jboss/
     0 Wed Apr 16 14:39:18 CEST 2008 WEB-INF/classes/org/jboss/test/
     0 Wed Apr 16 14:39:18 CEST 2008 WEB-INF/classes/org/jboss/test/ws/
     0 Wed Apr 16 14:39:20 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/
     0 Wed Apr 16 14:39:20 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/
     0 Wed Apr 16 14:39:18 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/
     0 Wed Apr 16 14:39:18 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/
     0 Wed Apr 16 14:39:18 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/
  1235 Wed Apr 16 14:39:18 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/SimpleServiceImpl.class
   997 Wed Apr 16 14:39:18 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/Echo.class
  1050 Wed Apr 16 14:39:18 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/EchoResponse.class
   679 Wed Apr 16 14:39:18 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/Ping.class
     0 Wed Apr 16 14:39:22 CEST 2008 WEB-INF/wsdl/
  2799 Wed Apr 16 14:39:20 CEST 2008 WEB-INF/wsdl/SimpleService.wsdl
</screen><para>The content of web.xml file is:</para><screen xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;web-app
   version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" 
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
   xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&gt;
   &lt;servlet&gt;
      &lt;servlet-name&gt;SimpleService&lt;/servlet-name&gt;
      &lt;servlet-class&gt;org.jboss.test.ws.jaxws.samples.wsrm.service.SimpleServiceImpl&lt;/servlet-class&gt;
   &lt;/servlet&gt;
   &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;SimpleService&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
   &lt;/servlet-mapping&gt;
&lt;/web-app&gt;</screen></section>
<section id="JBossWS-CXFWS-ReliableMessagingtutorial_Generating_JAXWS_Client_Artifacts"><title>Generating JAX-WS Client Artifacts</title><para>Before we will write regular JAX-WS client we need to generate client artifacts from WSDL. Here's the command to achieve that:</para><screen xml:space="preserve">cd $JBOSS_HOME/bin

./wsconsume.sh --keep \
   --package=org.jboss.test.ws.jaxws.samples.wsrm.generated \
   --output=/home/username/wsrm/cxf/wsconsume/generated/classes \
   --source=/home/username/wsrm/cxf/wsconsume/generated/src \
   /home/username/wsrm/cxf/wsprovide/generated/wsdl/SimpleService.wsdl
</screen><para>The above command generates the following artifacts:</para><screen xml:space="preserve"># compiled classes
ls /home/username/wsrm/cxf/wsconsume/generated/classes/org/jboss/test/ws/jaxws/samples/wsrm/generated/
Echo.class          ObjectFactory.class  Ping.class           SimpleService_Service.class
EchoResponse.class  package-info.class   SimpleService.class  SimpleService_SimpleServicePort_Client.class

# java sources
ls /home/username/wsrm/cxf/wsconsume/generated/src/org/jboss/test/ws/jaxws/samples/wsrm/generated/
Echo.java          ObjectFactory.java  Ping.java           SimpleService_Service.java
EchoResponse.java  package-info.java   SimpleService.java  SimpleService_SimpleServicePort_Client.java
</screen><para>Now the last step is to write the regular JAX-WS client using generated artifacts.</para><para> </para></section>
<section id="JBossWS-CXFWS-ReliableMessagingtutorial_Writing_Regular_JAXWS_Client"><title>Writing Regular JAX-WS Client</title><para>The following is the regular JAX-WS client using generated artifacts:</para><screen xml:space="preserve">package org.jboss.test.ws.jaxws.samples.wsrm.client;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import org.jboss.test.ws.jaxws.samples.wsrm.generated.SimpleService;

public final class SimpleServiceTestCase
{

   private static final String serviceURL = "http://localhost:8080/jaxws-samples-wsrm/SimpleService";
   
   public static void main(String[] args) throws Exception
   {
      // create service
      QName serviceName = new QName("http://www.jboss.org/jbossws/ws-extensions/wsrm", "SimpleService");
      URL wsdlURL = new URL(serviceURL + "?wsdl");
      Service service = Service.create(wsdlURL, serviceName);
      SimpleService proxy = (SimpleService)service.getPort(SimpleService.class);
      
      // invoke methods
      proxy.ping(); // one way call
      proxy.echo("Hello World!"); // request responce call
   }
   
}
</screen><para>Now we have both endpoint and client implementation but without WSRM in place. Our next goal is to turn on the WS-RM feature.</para><para> </para></section>
<section id="JBossWS-CXFWS-ReliableMessagingtutorial_Turning_on_WSRM_10"><title>Turning on WS-RM 1.0</title><section id="JBossWS-CXFWS-ReliableMessagingtutorial_Extending_WSDL_Using_WSPolicy"><title>Extending WSDL Using WS-Policy</title><para>To activate WSRM on server side we need to extend the WSDL with WSRM and addressing policies. Here is how it looks like:</para><screen xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;wsdl:definitions name="SimpleService" targetNamespace="<ulink url="http://www.jboss.org/jbossws/ws-extensions/wsrm">http://www.jboss.org/jbossws/ws-extensions/wsrm</ulink>" xmlns:tns="<ulink url="http://www.jboss.org/jbossws/ws-extensions/wsrm">http://www.jboss.org/jbossws/ws-extensions/wsrm</ulink>" xmlns:xsd="<ulink url="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</ulink>" xmlns:soap="<ulink url="http://schemas.xmlsoap.org/wsdl/soap/">http://schemas.xmlsoap.org/wsdl/soap/</ulink>" xmlns:wsdl="<ulink url="http://schemas.xmlsoap.org/wsdl/">http://schemas.xmlsoap.org/wsdl/</ulink>" xmlns:wsp="<ulink url="http://www.w3.org/2006/07/ws-policy">http://www.w3.org/2006/07/ws-policy</ulink>"&gt;
&lt;wsdl:types&gt;
&lt;xsd:schema xmlns:xsd="<ulink url="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</ulink>" xmlns:tns="<ulink url="http://www.jboss.org/jbossws/ws-extensions/wsrm">http://www.jboss.org/jbossws/ws-extensions/wsrm</ulink>" attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="<ulink url="http://www.jboss.org/jbossws/ws-extensions/wsrm">http://www.jboss.org/jbossws/ws-extensions/wsrm</ulink>"&gt;
&lt;xsd:element name="ping" type="tns:ping"/&gt;
&lt;xsd:complexType name="ping"&gt;
&lt;xsd:sequence/&gt;
&lt;/xsd:complexType&gt;
&lt;xsd:element name="echo" type="tns:echo"/&gt;
&lt;xsd:complexType name="echo"&gt;
&lt;xsd:sequence&gt;
&lt;xsd:element minOccurs="0" name="arg0" type="xsd:string"/&gt;
&lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;
&lt;xsd:element name="echoResponse" type="tns:echoResponse"/&gt;
&lt;xsd:complexType name="echoResponse"&gt;
&lt;xsd:sequence&gt;
&lt;xsd:element minOccurs="0" name="return" type="xsd:string"/&gt;
&lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;
&lt;/xsd:schema&gt;
  &lt;/wsdl:types&gt;
  &lt;wsdl:message name="echoResponse"&gt;
    &lt;wsdl:part name="parameters" element="tns:echoResponse"&gt;
    &lt;/wsdl:part&gt;
  &lt;/wsdl:message&gt;
  &lt;wsdl:message name="echo"&gt;
    &lt;wsdl:part name="parameters" element="tns:echo"&gt;
    &lt;/wsdl:part&gt;
  &lt;/wsdl:message&gt;
  &lt;wsdl:message name="ping"&gt;
    &lt;wsdl:part name="parameters" element="tns:ping"&gt;
    &lt;/wsdl:part&gt;
  &lt;/wsdl:message&gt;
  &lt;wsdl:portType name="SimpleService"&gt;
    &lt;wsdl:operation name="ping"&gt;
      &lt;wsdl:input name="ping" message="tns:ping"&gt;
    &lt;/wsdl:input&gt;
    &lt;/wsdl:operation&gt;
    &lt;wsdl:operation name="echo"&gt;
      &lt;wsdl:input name="echo" message="tns:echo"&gt;
    &lt;/wsdl:input&gt;
      &lt;wsdl:output name="echoResponse" message="tns:echoResponse"&gt;
    &lt;/wsdl:output&gt;
    &lt;/wsdl:operation&gt;
  &lt;/wsdl:portType&gt;
  &lt;wsdl:binding name="SimpleServiceSoapBinding" type="tns:SimpleService"&gt;

    &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;
    &lt;!-- Created WS-Policy with WSRM addressing assertions --&gt;
    &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;&lt;wsp:Policy&gt;
      &lt;wswa:UsingAddressing xmlns:wswa="<ulink url="http://www.w3.org/2006/05/addressing/wsdl">http://www.w3.org/2006/05/addressing/wsdl</ulink>"/&gt;
      &lt;wsrmp:RMAssertion xmlns:wsrmp="<ulink url="http://schemas.xmlsoap.org/ws/2005/02/rm/policy">http://schemas.xmlsoap.org/ws/2005/02/rm/policy</ulink>"/&gt;
    &lt;/wsp:Policy&gt;

    &lt;soap:binding style="document" transport="<ulink url="http://schemas.xmlsoap.org/soap/http">http://schemas.xmlsoap.org/soap/http</ulink>"/&gt;
    &lt;wsdl:operation name="ping"&gt;
      &lt;soap:operation soapAction="" style="document"/&gt;
      &lt;wsdl:input name="ping"&gt;
        &lt;soap:body use="literal"/&gt;
      &lt;/wsdl:input&gt;
    &lt;/wsdl:operation&gt;
    &lt;wsdl:operation name="echo"&gt;
      &lt;soap:operation soapAction="" style="document"/&gt;
      &lt;wsdl:input name="echo"&gt;
        &lt;soap:body use="literal"/&gt;
      &lt;/wsdl:input&gt;
      &lt;wsdl:output name="echoResponse"&gt;
        &lt;soap:body use="literal"/&gt;
      &lt;/wsdl:output&gt;
    &lt;/wsdl:operation&gt;
  &lt;/wsdl:binding&gt;
  &lt;wsdl:service name="SimpleService"&gt;
    &lt;wsdl:port name="SimpleServicePort" binding="tns:SimpleServiceSoapBinding"&gt;
      &lt;soap:address location="<ulink url="http://localhost:9090/hello">http://localhost:9090/hello</ulink>"/&gt;
    &lt;/wsdl:port&gt;
  &lt;/wsdl:service&gt;
&lt;/wsdl:definitions&gt;
</screen><para> </para><para> </para></section>
<section id="JBossWS-CXFWS-ReliableMessagingtutorial_Basic_WSRM_configuration"><title>Basic WS-RM configuration</title><para>Once the endpoint wsdl is properly updated with the policies elements, the JBossWS-CXF stack is <emphasis>automatically</emphasis> able to detect the need for the WS-Policy engine to be used, both on client and server side, for enabling WS-Reliable Messaging.</para><para>The endpoint advertises RM capabilities through the published wsdl and the client is required to also enable WS-RM for successfully exchanging messages with the server.</para><para>The regular jaxws client above is enough if the user does not need to tune any specific detail of the RM subsystem (acknowledgment / retransmission intervals, thresholds, ...)</para><para> </para></section>
<section id="JBossWS-CXFWS-ReliableMessagingtutorial_Advanced_WSRM_configuration"><title>Advanced WS-RM configuration</title><para>When users want to have full control over the way WS-RM communication is established, the current CXF Bus needs to be properly configured. This can be done through a CXF Spring configuration.</para><section id="JBossWS-CXFWS-ReliableMessagingtutorial_Providing_Client_CXF_Configuration"><title>Providing Client CXF Configuration</title><para>Next step is to create the client CXF configuration file that will be used by client. The following file was copied/pasted from CXF 2.0.5 ws_rm sample. It simply activates the WSRM protocol for CXF client. We will name this file <emphasis role="bold">cxf.xml</emphasis> in our sample. Here's the content of this file:</para><screen xml:space="preserve">&lt;beans
  xmlns="<ulink url="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</ulink>"
  xmlns:xsi="<ulink url="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</ulink>"
  xmlns:cxf="<ulink url="http://cxf.apache.org/core">http://cxf.apache.org/core</ulink>"
  xmlns:wsa="<ulink url="http://cxf.apache.org/ws/addressing">http://cxf.apache.org/ws/addressing</ulink>"
  xmlns:http="<ulink url="http://cxf.apache.org/transports/http/configuration">http://cxf.apache.org/transports/http/configuration</ulink>"
  xmlns:wsrm-policy="<ulink url="http://schemas.xmlsoap.org/ws/2005/02/rm/policy">http://schemas.xmlsoap.org/ws/2005/02/rm/policy</ulink>"
  xmlns:wsrm-mgr="<ulink url="http://cxf.apache.org/ws/rm/manager">http://cxf.apache.org/ws/rm/manager</ulink>"
  xsi:schemaLocation="
    <ulink url="http://cxf.apache.org/core">http://cxf.apache.org/core</ulink>
    <ulink url="http://cxf.apache.org/schemas/core.xsd">http://cxf.apache.org/schemas/core.xsd</ulink>
    <ulink url="http://cxf.apache.org/transports/http/configuration">http://cxf.apache.org/transports/http/configuration</ulink>
    <ulink url="http://cxf.apache.org/schemas/configuration/http-conf.xsd">http://cxf.apache.org/schemas/configuration/http-conf.xsd</ulink>
    <ulink url="http://schemas.xmlsoap.org/ws/2005/02/rm/policy">http://schemas.xmlsoap.org/ws/2005/02/rm/policy</ulink>
    <ulink url="http://schemas.xmlsoap.org/ws/2005/02/rm/wsrm-policy.xsd">http://schemas.xmlsoap.org/ws/2005/02/rm/wsrm-policy.xsd</ulink>
    <ulink url="http://cxf.apache.org/ws/rm/manager">http://cxf.apache.org/ws/rm/manager</ulink>
    <ulink url="http://cxf.apache.org/schemas/configuration/wsrm-manager.xsd">http://cxf.apache.org/schemas/configuration/wsrm-manager.xsd</ulink>
    <ulink url="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</ulink>
    <ulink url="http://www.springframework.org/schema/beans/spring-beans.xsd">http://www.springframework.org/schema/beans/spring-beans.xsd</ulink>"&gt;
 
  &lt;cxf:bus&gt;
    &lt;cxf:features&gt;
      &lt;cxf:logging/&gt;
      &lt;wsa:addressing/&gt;
      &lt;wsrm-mgr:reliableMessaging&gt;
        &lt;wsrm-policy:RMAssertion&gt;
          &lt;wsrm-policy:BaseRetransmissionInterval Milliseconds="4000"/&gt;           
          &lt;wsrm-policy:AcknowledgementInterval Milliseconds="2000"/&gt;          
        &lt;/wsrm-policy:RMAssertion&gt;
        &lt;wsrm-mgr:destinationPolicy&gt;
          &lt;wsrm-mgr:acksPolicy intraMessageThreshold="0" /&gt;
        &lt;/wsrm-mgr:destinationPolicy&gt;
      &lt;/wsrm-mgr:reliableMessaging&gt;
    &lt;/cxf:features&gt;
  &lt;/cxf:bus&gt;
    
&lt;/beans&gt;
</screen><para>And that's almost all. The client configuration needs to picked up by the client classloader; in order to achieve that the cxf.xml file has to be put in the META-INF directory of client jar. That jar should then be provided when setting the class loader.</para><para>Alternatively the bus configuration can also be read programmatically as follows:</para><para> </para></section>
<section id="JBossWS-CXFWS-ReliableMessagingtutorial_Updating_Client_Code_to_Read_Bus_Configuration_File"><title>Updating Client Code to Read Bus Configuration File</title><para>And here's the last piece the updated CXF client:</para><screen xml:space="preserve"><emphasis role="bold">package</emphasis> org.jboss.test.ws.jaxws.samples.wsrm.client;
 
<emphasis role="bold">import</emphasis> java.net.URL;
<emphasis role="bold">import</emphasis> java.io.File;
<emphasis role="bold">import</emphasis> javax.xml.namespace.QName;
<emphasis role="bold">import</emphasis> javax.xml.ws.Service;
<emphasis role="bold">import</emphasis> org.apache.cxf.Bus;
<emphasis role="bold">import</emphasis> org.apache.cxf.BusFactory;
<emphasis role="bold">import</emphasis> org.apache.cxf.bus.spring.SpringBusFactory;
<emphasis role="bold">import</emphasis> org.jboss.test.ws.jaxws.samples.wsrm.generated.SimpleService;
 
<emphasis role="bold">public</emphasis> <emphasis role="bold">final</emphasis> <emphasis role="bold">class</emphasis> SimpleServiceTestCase
{
 
   <emphasis role="bold">private</emphasis> <emphasis role="bold">static</emphasis> <emphasis role="bold">final</emphasis> String serviceURL = "http://localhost:8080/jaxws-samples-wsrm/SimpleService";
   
   <emphasis role="bold">public</emphasis> <emphasis role="bold">static</emphasis> <emphasis role="bold">void</emphasis> main(String[] args) <emphasis role="bold">throws</emphasis> Exception
   {
      // create bus
      SpringBusFactory busFactory = <emphasis role="bold">new</emphasis> SpringBusFactory();
      URL cxfConfig = <emphasis role="bold">new</emphasis> File("resources/jaxws/samples/wsrm/cxf.xml").toURL();
      Bus bus = busFactory.createBus(cxfConfig);
      busFactory.setDefaultBus(bus);
 
      // create service
      QName serviceName = <emphasis role="bold">new</emphasis> QName("http://www.jboss.org/jbossws/ws-extensions/wsrm", "SimpleService");
      URL wsdlURL = <emphasis role="bold">new</emphasis> URL(serviceURL + "?wsdl");
      Service service = Service.create(wsdlURL, serviceName);
      SimpleService proxy = (SimpleService)service.getPort(SimpleService.class);
      
      // invoke methods
      proxy.ping(); // one way call
      proxy.echo("Hello World!"); // request responce call
 
      // shutdown bus
      bus.shutdown(<emphasis role="bold">true</emphasis>);
   }
   
}
</screen></section>
</section>
</section>
<section id="JBossWS-CXFWS-ReliableMessagingtutorial_Sample_Sources"><title>Sample Sources</title><para>All sources from this tutorial are part of JBossWS-CXF distribution.</para></section>
</chapter>