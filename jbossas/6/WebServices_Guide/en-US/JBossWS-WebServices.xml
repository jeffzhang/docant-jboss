<?xml version="1.0" encoding="UTF-8"?><chapter id="chap_JBossWS-WebServices"><title>JBossWS-WebServices</title><para>The Internet features a lot of pages about web services. They describe what web services are, how they work, which kind of technology is most suitable for their development and so on. This page's aim is not to provide another web service definition. We will instead highlight some key concepts about Web services and what they're useful for right now.</para><section><title>What is a web service?</title><para><emphasis>A Web service is a software system designed to support interoperable machine-to-machine interaction over a network. It has an interface described in a machine-processable format (specifically WSDL). Other systems interact with the Web service in a manner prescribed by its description using SOAP messages, typically conveyed using HTTP with an XML serialization in conjunction with other Web-related standards.</emphasis></para><para>From <emphasis>W3C Web Services Architecture</emphasis> <ulink url="http://www.w3.org/TR/2004/NOTE-ws-arch-20040211">[1]</ulink></para><para> </para><para>Technical details will be later explained in the <link linkend="chap_JBossWS-Fromconceptstotechnology">documentation</link>. What comes out is that web services provide a standard means of interoperating between different software applications. Each of these applications may run on a variety of platforms and/or frameworks providing a set of functionalities. The main concern is about interoperability between services.</para><itemizedlist><listitem><para> A service provider publishes a <link linkend="chap_JBossWS-Fromconceptstotechnology">service contract</link> that exposes the public functions (operations) it is able to perform and thus service consumers can use. </para></listitem><listitem><para> Both service providers and service consumers features concrete softwares that <link linkend="chap_JBossWS-Fromconceptstotechnology">send and receive messages</link> according to the informations contained in the service contract they agreed before the communication. </para></listitem><listitem><para> Basic Web services specifications define the standard way of <link linkend="chap_JBossWS-Fromconceptstotechnology">publishing a service contract</link> and <link linkend="chap_JBossWS-Fromconceptstotechnology">communicating</link>. </para></listitem><listitem><para> Web services stacks (like <emphasis>JBossWS</emphasis>) conform to these specifications providing software layers to developers who want to either implement a service provider or service consumer. This way they almost only need to develop their own business logic in their preferred way, without dealing with the low-level details of message exchanges and so on.</para></listitem></itemizedlist><para> </para></section>
<section><title>Who needs web services?</title><para>Enterprise systems communication may benefit from a wise adoption of WS technologies. Exposing well designed contracts allows developers to extract an abstract view of their service capabilities. Considering the standardized way contracts are written, this definitely helps communication with third-party systems and eventually support business-to-business integration. No more agreement required on vendor specific implementation details, home-brew communication protocol or custom per-customer settings. Everything is clear and standardized in the contract the provider and consumer agree on. Of course this also reduces the dependencies between implementations allowing other consumers to easily use the provided service without major changes.</para><para> </para><para>Enterprise system may benefit from web service technologies also for internal heterogenous subsystems communication. As a matter of fact their interoperability boosts service reuse and composition. No more need to rewrite whole functionalities only because they were developed by another enterprise department using another software language.</para><para> </para></section>
<section><title>Service Oriented Architecture (SOA)</title><para>In case you think you already heard something like this... yes, those in previous paragraph are some of the principles <ulink url="http://en.wikipedia.org/wiki/Service-oriented_architecture">Service Oriented Architecture</ulink> is based on.</para><para> </para><para>Transforming an enterprise business to Service Oriented Architecture includes obtaining standardized service contract, service reusability, service abstraction, service loose coupling, service composability and so on.</para><para> </para><para>Of course SOA is an architectural model agnostic to technology platforms and every enterprise can pursue the strategic goals associated with service-oriented computing using different technologies. However in the current marketplace, Web Services are probably the technology platform that better suits SOA principles and are most used to get to this architecture.</para><para> </para></section>
<section><title>What web services are not...</title><para>Needless to say that web services are not the solution for every software system communication.</para><para> </para><para>Nowadays they are meant to be used for loosely-coupled coarse-grained communication, for message (document) exchange. Moreover during the last years a lot of specifications (<ulink url="http://community.jboss.org/docs/DOC-13554#Future_of_Web_Services">WS-*</ulink>) were discussed and finally approved to standardize ws-related advanced aspects including reliable messaging, message-level security, cross-service transactions, etc. Finally web service specifications also include notion of registries to collect service contract references, to easily discover service implementations, etc.</para><para> </para><para>This all means that the web services technology platform suits complex enterprise communication and is not simply the latest way of doing remote procedure calls.</para></section>
</chapter>